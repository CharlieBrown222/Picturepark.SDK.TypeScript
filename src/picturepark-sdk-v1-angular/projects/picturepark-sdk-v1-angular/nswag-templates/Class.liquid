{% if HasDescription -%}
/** {{ Description }} */
{% endif -%}
{% if ExportTypes %}export {% endif %}{% if IsAbstract %}abstract {% endif %}class {{ ClassName }}{% if HasInheritance %}{{ Inheritance }}{% else %} extends DTOBase{% endif %} {
{% for property in Properties -%}
{%   if property.HasDescription -%}
    /** {{ property.Description }} */
{%   endif -%}
    {% if property.IsReadOnly %}readonly {% endif %}{{ property.PropertyName }}{% if property.IsOptional %}?{% elseif RequiresStrictPropertyInitialization && !property.HasDefaultValue %}!{% endif %}: {{ property.Type }}{{ property.TypePostfix }};
{% endfor -%}
{% if HasIndexerProperty -%}

    [key: string]: {{ IndexerPropertyValueType }}; 
{% endif -%}
{% if HasDiscriminator -%}

    protected _kind: string;
{% endif -%}

{% if GenerateConstructorInterface or HasBaseDiscriminator -%}
    constructor({% if GenerateConstructorInterface %}data?: I{{ ClassName }}{% endif %}) {
        super({% if GenerateConstructorInterface %}data{% endif %});
{%     for property in Properties -%}
{%                     if property.IsArray -%}
        this.setProp("array", "{{ property.PropertyName }}", {{property.SupportsConstructorConversion}}{% if property.SupportsConstructorConversion or property.IsDiscriminator -%}, (item: any) => new {{ property.ArrayItemType }}(item){% endif %});
{%                     elseif property.IsDictionary -%}
        this.setProp("dictionary", "{{ property.PropertyName }}", {{property.SupportsConstructorConversion}}{% if property.SupportsConstructorConversion -%}, (item: any) => new {{ property.DictionaryItemType }}(item){% endif %});
{%                     else -%}
        this.setProp("object", "{{ property.PropertyName }}", {{property.SupportsConstructorConversion}}{% if property.SupportsConstructorConversion -%}, (item: any) => new {{ property.Type }}(item){% endif %});
{%                     endif property.IsArray -%}
{%     endfor -%}

{%     if GenerateConstructorInterface and (HasInheritance == false or ConvertConstructorInterfaceData) -%}
{%         if ConvertConstructorInterfaceData -%}
        if (data) {
            this.construct(data);
        }
{%         endif -%}
{%     endif -%}
{%     if HasDefaultValues -%}
        {% if GenerateConstructorInterface %}if (!data) {% endif %}{
{%         for property in Properties -%}
{%             if property.HasDefaultValue -%}
            this.{{ property.PropertyName }} = {{ property.DefaultValue }};
{%             endif -%}
{%         endfor -%}
        }
{%     endif -%}
{%     if HasBaseDiscriminator -%}
        this._kind = "{{ DiscriminatorName }}";
{%     endif -%}
    }
{% endif -%}

    init(data?: any{% if HandleReferences %}, _mappings?: any{% endif %}) {
        super.init(data);
{% if HasIndexerProperty or HasProperties -%}
        if (data) {
{%     if HasIndexerProperty -%}
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
{%     endif -%}
        /*
{%     for property in Properties -%}
            {{ property.ConvertToClassCode | tab }}
{%     endfor -%}
        */
        }
{% endif -%}
    }

     fromJS(data: any{% if HandleReferences %}, _mappings?: any{% endif %}): {{ ClassName }} {
        return {{ ClassName }}.fromJS(data);
     }

    static fromJS(data: any{% if HandleReferences %}, _mappings?: any{% endif %}): {{ ClassName }} {
        data = typeof data === 'object' ? data : {};
{% if HandleReferences -%}
{%   if HasBaseDiscriminator -%}
{%     for derivedClass in DerivedClasses -%}
        if (data["{{ BaseDiscriminator }}"] === "{{ derivedClass.Discriminator }}")
{%       if derivedClass.IsAbstract -%}
            throw new Error("The abstract class '{{ derivedClass.ClassName }}' cannot be instantiated.");
{%       else -%}
            return createInstance<{{ derivedClass.ClassName }}>(data, _mappings, {{ derivedClass.ClassName }});
{%       endif -%}
{%     endfor -%}
{%   endif -%}
{%   if IsAbstract -%}
        throw new Error("The abstract class '{{ ClassName }}' cannot be instantiated.");
{%   else -%}
        return createInstance<{{ ClassName }}>(data, _mappings, {{ ClassName }});
{%   endif -%}
{% else -%}
{%   if HasBaseDiscriminator -%}
{%     for derivedClass in DerivedClasses -%}
        if (data["{{ BaseDiscriminator }}"] === "{{ derivedClass.Discriminator }}") {
{%       if derivedClass.IsAbstract -%}
            throw new Error("The abstract class '{{ derivedClass.ClassName }}' cannot be instantiated.");
{%       else -%}
            let result = new {{ derivedClass.ClassName }}();
            result.init(data);
            return result;
{%       endif -%}
        }
{%     endfor -%}
{%   endif -%}
{%     if IsAbstract -%}
        throw new Error("The abstract class '{{ ClassName }}' cannot be instantiated.");
{%     else -%}
        let result = new {{ ClassName }}();
        result.init(data);
        return result;
{%     endif -%}
{% endif -%}
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
{% if HasIndexerProperty -%}
        for (var property in this) {
            if (this.hasOwnProperty(property) && property !== '_fields')
                data[property] = this[property];
        }
{% endif -%}
{% if HasDiscriminator -%}
        data["{{ BaseDiscriminator }}"] = this._kind; 
{% endif -%}
{% for property in Properties -%}
        {{ property.ConvertToJavaScriptCode | tab }}
{% endfor -%}
{% if HasInheritance -%}
        super.toJSON(data);
{% endif -%}
        return data; 
    }
{% if GenerateCloneMethod -%}

    clone(): {{ ClassName }} {
{%   if IsAbstract -%}
        throw new Error("The abstract class '{{ ClassName }}' cannot be instantiated.");
{%   else -%}
        const json = this.toJSON();
        let result = new {{ ClassName }}();
        result.init(json);
        return result;
{%   endif -%}
    }
{% endif -%}
}
{% if GenerateConstructorInterface -%}

{%   if HasDescription -%}
/** {{ Description }} */
{%   endif -%}
{% if ExportTypes %}export {% endif %}interface I{{ ClassName }}{{ InterfaceInheritance }} {
{%   for property in Properties -%}
{%       if property.HasDescription -%}
    /** {{ property.Description }} */
{%       endif -%}
    {{ property.PropertyName }}{% if property.IsOptional %}?{% endif %}: {{ property.ConstructorInterfaceType }}{{ property.TypePostfix }};
{%   endfor -%}
{%   if HasIndexerProperty -%}

    [key: string]: {{ IndexerPropertyValueType }}; 
{%   endif -%}
}
{% endif -%}