var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.1.0 (NJsonSchema v10.0.19.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AuthClient = /** @class */ (function () {
        function AuthClient(pictureparkApiUrl, customerAlias) {
            this.pictureparkApiUrl = pictureparkApiUrl;
            this.customerAlias = customerAlias;
        }
        AuthClient.prototype.getBaseUrl = function (defaultUrl, requestedUrl) {
            return requestedUrl ? requestedUrl : this.pictureparkApiUrl;
        };
        AuthClient.prototype.transformHttpRequestOptions = function (options) {
            if (options.headers && this.customerAlias) {
                options.headers.set('Picturepark-CustomerAlias', this.customerAlias);
            }
            return Promise.resolve(options);
        };
        return AuthClient;
    }());
    exports.AuthClient = AuthClient;
    var PictureparkClientBase = /** @class */ (function () {
        function PictureparkClientBase(authClient) {
            this.authClient = authClient;
        }
        PictureparkClientBase.prototype.getBaseUrl = function (defaultUrl) {
            return this.authClient ? this.authClient.getBaseUrl(defaultUrl) : defaultUrl;
        };
        PictureparkClientBase.prototype.transformOptions = function (options) {
            return this.authClient ? this.authClient.transformHttpRequestOptions(options) : Promise.resolve(options);
        };
        return PictureparkClientBase;
    }());
    exports.PictureparkClientBase = PictureparkClientBase;
    var BusinessProcessClient = /** @class */ (function (_super) {
        __extends(BusinessProcessClient, _super);
        function BusinessProcessClient(configuration, baseUrl, http) {
            var _this = _super.call(this, configuration) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = _this.getBaseUrl("", baseUrl);
            return _this;
        }
        /**
         * Search
         * @param businessProcessSearchRequest The business process request.
         * @return BusinessProcessSearchResult
         */
        BusinessProcessClient.prototype.search = function (businessProcessSearchRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/businessProcesses/search";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(businessProcessSearchRequest);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processSearch(_response);
            });
        };
        BusinessProcessClient.prototype.processSearch = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Wait for life cycles
         * @param processId The business process id.
         * @param lifeCycleIds (optional) Business process life cycles to wait for.
         * @param timeout (optional) The timeout to wait for completion.
         * @return BusinessProcessWaitForLifeCycleResult
         */
        BusinessProcessClient.prototype.waitForLifeCycles = function (processId, lifeCycleIds, timeout) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/businessProcesses/{processId}/waitLifeCycles?";
            if (processId === undefined || processId === null)
                throw new Error("The parameter 'processId' must be defined.");
            url_ = url_.replace("{processId}", encodeURIComponent("" + processId));
            if (lifeCycleIds !== undefined)
                lifeCycleIds && lifeCycleIds.forEach(function (item) { url_ += "lifeCycleIds=" + encodeURIComponent("" + item) + "&"; });
            if (timeout !== undefined)
                url_ += "timeout=" + encodeURIComponent("" + timeout) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processWaitForLifeCycles(_response);
            });
        };
        BusinessProcessClient.prototype.processWaitForLifeCycles = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Wait for states
         * @param processId The business process id.
         * @param states (optional) Business process states to wait for.
         * @param timeout (optional) The timeout to wait for completion.
         * @return BusinessProcessWaitResult
         */
        BusinessProcessClient.prototype.waitForStates = function (processId, states, timeout) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/businessProcesses/{processId}/waitStates?";
            if (processId === undefined || processId === null)
                throw new Error("The parameter 'processId' must be defined.");
            url_ = url_.replace("{processId}", encodeURIComponent("" + processId));
            if (states !== undefined)
                states && states.forEach(function (item) { url_ += "states=" + encodeURIComponent("" + item) + "&"; });
            if (timeout !== undefined)
                url_ += "timeout=" + encodeURIComponent("" + timeout) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processWaitForStates(_response);
            });
        };
        BusinessProcessClient.prototype.processWaitForStates = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Wait for completion
         * @param processId The business process id.
         * @param timeout (optional) The timeout to wait for completion.
         * @return BusinessProcessWaitResult
         */
        BusinessProcessClient.prototype.waitForCompletion = function (processId, timeout) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/businessProcesses/{processId}/waitCompletion?";
            if (processId === undefined || processId === null)
                throw new Error("The parameter 'processId' must be defined.");
            url_ = url_.replace("{processId}", encodeURIComponent("" + processId));
            if (timeout !== undefined)
                url_ += "timeout=" + encodeURIComponent("" + timeout) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processWaitForCompletion(_response);
            });
        };
        BusinessProcessClient.prototype.processWaitForCompletion = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Get details
         * @param processId The business process id.
         * @return BusinessProcessDetails
         */
        BusinessProcessClient.prototype.getDetails = function (processId) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/businessProcesses/{processId}/details";
            if (processId === undefined || processId === null)
                throw new Error("The parameter 'processId' must be defined.");
            url_ = url_.replace("{processId}", encodeURIComponent("" + processId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetDetails(_response);
            });
        };
        BusinessProcessClient.prototype.processGetDetails = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return BusinessProcessClient;
    }(PictureparkClientBase));
    exports.BusinessProcessClient = BusinessProcessClient;
    var ChannelClient = /** @class */ (function (_super) {
        __extends(ChannelClient, _super);
        function ChannelClient(configuration, baseUrl, http) {
            var _this = _super.call(this, configuration) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = _this.getBaseUrl("", baseUrl);
            return _this;
        }
        /**
         * Get all channels
         * @return List of channel
         */
        ChannelClient.prototype.getAll = function () {
            var _this = this;
            var url_ = this.baseUrl + "/v1/channels";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetAll(_response);
            });
        };
        ChannelClient.prototype.processGetAll = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Create channel
         * @param request The request containing information needed to create new channel.
         * @return Channel
         */
        ChannelClient.prototype.create = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/channels";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processCreate(_response);
            });
        };
        ChannelClient.prototype.processCreate = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Get channel
         * @param id The channel ID.
         * @return Channel
         */
        ChannelClient.prototype.get = function (id) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/channels/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGet(_response);
            });
        };
        ChannelClient.prototype.processGet = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Update channel
         * @param id ID of channel to update
         * @param request The request containing information needed to update the channel.
         * @return Updated channel
         */
        ChannelClient.prototype.update = function (id, request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/channels/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processUpdate(_response);
            });
        };
        ChannelClient.prototype.processUpdate = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Delete channel
         * @param id ID of the channel that should be deleted.
         * @return OK
         */
        ChannelClient.prototype.delete = function (id) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/channels/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: {}
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDelete(_response);
            });
        };
        ChannelClient.prototype.processDelete = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return ChannelClient;
    }(PictureparkClientBase));
    exports.ChannelClient = ChannelClient;
    var ContentClient = /** @class */ (function (_super) {
        __extends(ContentClient, _super);
        function ContentClient(configuration, baseUrl, http) {
            var _this = _super.call(this, configuration) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = _this.getBaseUrl("", baseUrl);
            return _this;
        }
        /**
         * Get content
         * @param contentId The content ID.
         * @param resolveBehaviors (optional) List of enums that control which parts of the content are resolved and returned.
         * @return Content detail
         */
        ContentClient.prototype.get = function (contentId, resolveBehaviors) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contents/{contentId}?";
            if (contentId === undefined || contentId === null)
                throw new Error("The parameter 'contentId' must be defined.");
            url_ = url_.replace("{contentId}", encodeURIComponent("" + contentId));
            if (resolveBehaviors !== undefined)
                resolveBehaviors && resolveBehaviors.forEach(function (item) { url_ += "resolveBehaviors=" + encodeURIComponent("" + item) + "&"; });
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGet(_response);
            });
        };
        ContentClient.prototype.processGet = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Delete content
         * @param contentId The ID of the content to delete.
         * @param forceReferenceRemoval (optional) A value indicating whether references to the content should be removed.
         * @param timeout (optional) Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
                    Only the waiting is aborted, and the calls returned.
         * @return Ok
         */
        ContentClient.prototype.delete = function (contentId, forceReferenceRemoval, timeout) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contents/{contentId}?";
            if (contentId === undefined || contentId === null)
                throw new Error("The parameter 'contentId' must be defined.");
            url_ = url_.replace("{contentId}", encodeURIComponent("" + contentId));
            if (forceReferenceRemoval !== undefined)
                url_ += "forceReferenceRemoval=" + encodeURIComponent("" + forceReferenceRemoval) + "&";
            if (timeout !== undefined)
                url_ += "timeout=" + encodeURIComponent("" + timeout) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: {}
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDelete(_response);
            });
        };
        ContentClient.prototype.processDelete = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Get multiple contents
         * @param ids List of content IDs
         * @param resolveBehaviors (optional) List of enums that control which parts of the content are resolved and returned.
         * @return List of Content detail
         */
        ContentClient.prototype.getMany = function (ids, resolveBehaviors) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contents?";
            if (ids === undefined)
                throw new Error("The parameter 'ids' must be defined.");
            else
                ids && ids.forEach(function (item) { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
            if (resolveBehaviors !== undefined)
                resolveBehaviors && resolveBehaviors.forEach(function (item) { url_ += "resolveBehaviors=" + encodeURIComponent("" + item) + "&"; });
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetMany(_response);
            });
        };
        ContentClient.prototype.processGetMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Create content
         * @param contentCreateRequest Content create request.
         * @param resolveBehaviors (optional) List of enums that control which parts of the content are resolved and returned.
         * @param allowMissingDependencies (optional) Allows creating contents that refer to list items or contents that don't exist in the system.
         * @param timeout (optional) Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
                    Only the waiting is aborted, and the calls returned.
         * @return The content details
         */
        ContentClient.prototype.create = function (contentCreateRequest, resolveBehaviors, allowMissingDependencies, timeout) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contents?";
            if (resolveBehaviors !== undefined)
                resolveBehaviors && resolveBehaviors.forEach(function (item) { url_ += "resolveBehaviors=" + encodeURIComponent("" + item) + "&"; });
            if (allowMissingDependencies === null)
                throw new Error("The parameter 'allowMissingDependencies' cannot be null.");
            else if (allowMissingDependencies !== undefined)
                url_ += "allowMissingDependencies=" + encodeURIComponent("" + allowMissingDependencies) + "&";
            if (timeout !== undefined)
                url_ += "timeout=" + encodeURIComponent("" + timeout) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(contentCreateRequest);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processCreate(_response);
            });
        };
        ContentClient.prototype.processCreate = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Search contents
         * @param contentSearchRequest Content search request.
         * @return Content search result
         */
        ContentClient.prototype.search = function (contentSearchRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contents/search";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(contentSearchRequest);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processSearch(_response);
            });
        };
        ContentClient.prototype.processSearch = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Aggregate contents
         * @param contentAggregationRequest Content aggregation request.
         * @return Object aggregation result
         */
        ContentClient.prototype.aggregate = function (contentAggregationRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contents/aggregate";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(contentAggregationRequest);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processAggregate(_response);
            });
        };
        ContentClient.prototype.processAggregate = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Aggregate contents on channel
         * @param contentAggregationOnChannelRequest Content aggregation on channel request.
         * @return Object aggregation result
         */
        ContentClient.prototype.aggregateOnChannel = function (contentAggregationOnChannelRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contents/aggregateOnChannel";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(contentAggregationOnChannelRequest);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processAggregateOnChannel(_response);
            });
        };
        ContentClient.prototype.processAggregateOnChannel = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Get content references
         * @param contentId The content ID whose references to retrieve.
         * @param contentReferencesRequest Content references request.
         * @return ContentReferencesResult
         */
        ContentClient.prototype.getReferences = function (contentId, contentReferencesRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contents/{contentId}/references/search";
            if (contentId === undefined || contentId === null)
                throw new Error("The parameter 'contentId' must be defined.");
            url_ = url_.replace("{contentId}", encodeURIComponent("" + contentId));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(contentReferencesRequest);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetReferences(_response);
            });
        };
        ContentClient.prototype.processGetReferences = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Get many content references
         * @param contentManyReferencesRequest Content many references request.
         * @return Content references result
         */
        ContentClient.prototype.getReferencesMany = function (contentManyReferencesRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contents/many/references/search";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(contentManyReferencesRequest);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetReferencesMany(_response);
            });
        };
        ContentClient.prototype.processGetReferencesMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Create download link
         * @param request Content download link request
         * @return Download link
         */
        ContentClient.prototype.createDownloadLink = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contents/downloadLinks";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processCreateDownloadLink(_response);
            });
        };
        ContentClient.prototype.processCreateDownloadLink = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Download content
         * @param contentId The content ID.
         * @param outputFormatId The output format ID.
         * @param width (optional) Optional width in pixels to resize image.
         * @param height (optional) Optional height in pixels to resize image.
         * @param range (optional) The range of bytes to download (http range header): bytes={from}-{to} (e.g. bytes=0-100000).
         * @return Http response message
         */
        ContentClient.prototype.download = function (contentId, outputFormatId, width, height, range) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contents/downloads/{contentId}/{outputFormatId}?";
            if (contentId === undefined || contentId === null)
                throw new Error("The parameter 'contentId' must be defined.");
            url_ = url_.replace("{contentId}", encodeURIComponent("" + contentId));
            if (outputFormatId === undefined || outputFormatId === null)
                throw new Error("The parameter 'outputFormatId' must be defined.");
            url_ = url_.replace("{outputFormatId}", encodeURIComponent("" + outputFormatId));
            if (width !== undefined)
                url_ += "width=" + encodeURIComponent("" + width) + "&";
            if (height !== undefined)
                url_ += "height=" + encodeURIComponent("" + height) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "range": range !== undefined && range !== null ? "" + range : "",
                    "Accept": "application/octet-stream"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDownload(_response);
            });
        };
        ContentClient.prototype.processDownload = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200 || status === 206) {
                var contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
                var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                var fileName_1 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
                return response.blob().then(function (blob) { return { fileName: fileName_1, data: blob, status: status, headers: _headers }; });
            }
            else if (status === 206) {
                var contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
                var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                var fileName_2 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
                return response.blob().then(function (blob) { return { fileName: fileName_2, data: blob, status: status, headers: _headers }; });
            }
            else if (status === 412) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Download thumbnail
         * @param contentId The content ID.
         * @param size Thumbnail size. Either small, medium or large.
         * @param width (optional) Optional width in pixels to resize image.
         * @param height (optional) Optional height in pixels to resize image.
         * @return Http response message
         */
        ContentClient.prototype.downloadThumbnail = function (contentId, size, width, height) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contents/thumbnails/{contentId}/{size}?";
            if (contentId === undefined || contentId === null)
                throw new Error("The parameter 'contentId' must be defined.");
            url_ = url_.replace("{contentId}", encodeURIComponent("" + contentId));
            if (size === undefined || size === null)
                throw new Error("The parameter 'size' must be defined.");
            url_ = url_.replace("{size}", encodeURIComponent("" + size));
            if (width !== undefined)
                url_ += "width=" + encodeURIComponent("" + width) + "&";
            if (height !== undefined)
                url_ += "height=" + encodeURIComponent("" + height) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/octet-stream"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDownloadThumbnail(_response);
            });
        };
        ContentClient.prototype.processDownloadThumbnail = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200 || status === 206) {
                var contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
                var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                var fileName_3 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
                return response.blob().then(function (blob) { return { fileName: fileName_3, data: blob, status: status, headers: _headers }; });
            }
            else if (status === 412) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Create multiple contents
         * @param contentCreateManyRequest Content create many request.
         * @return Business process
         */
        ContentClient.prototype.createMany = function (contentCreateManyRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contents/many";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(contentCreateManyRequest);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processCreateMany(_response);
            });
        };
        ContentClient.prototype.processCreateMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Delete multiple contents
         * @param deleteManyRequest Delete many request.
         * @return Business process
         */
        ContentClient.prototype.deleteMany = function (deleteManyRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contents/many/delete";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(deleteManyRequest);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteMany(_response);
            });
        };
        ContentClient.prototype.processDeleteMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Delete multiple contents - by filter
         * @param deleteManyFilterRequest Delete many by filter request.
         * @return Business process
         */
        ContentClient.prototype.deleteManyByFilter = function (deleteManyFilterRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contents/many/delete/filter";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(deleteManyFilterRequest);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteManyByFilter(_response);
            });
        };
        ContentClient.prototype.processDeleteManyByFilter = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Restore content
         * @param contentId The content ID.
         * @param allowMissingDependencies (optional) Allows restoring contents that refer to list items or contents that don't exist in the system.
         * @param timeout (optional) Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
                    Only the waiting is aborted, and the calls returned.
         * @return Ok
         */
        ContentClient.prototype.restore = function (contentId, allowMissingDependencies, timeout) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contents/{contentId}/restore?";
            if (contentId === undefined || contentId === null)
                throw new Error("The parameter 'contentId' must be defined.");
            url_ = url_.replace("{contentId}", encodeURIComponent("" + contentId));
            if (allowMissingDependencies === null)
                throw new Error("The parameter 'allowMissingDependencies' cannot be null.");
            else if (allowMissingDependencies !== undefined)
                url_ += "allowMissingDependencies=" + encodeURIComponent("" + allowMissingDependencies) + "&";
            if (timeout !== undefined)
                url_ += "timeout=" + encodeURIComponent("" + timeout) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "POST",
                headers: {}
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processRestore(_response);
            });
        };
        ContentClient.prototype.processRestore = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Restore multiple contents
         * @param restoreManyRequest Content restore many request.
         * @return Business process
         */
        ContentClient.prototype.restoreMany = function (restoreManyRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contents/many/restore";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(restoreManyRequest);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processRestoreMany(_response);
            });
        };
        ContentClient.prototype.processRestoreMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Update content file
         * @param contentId The ID of the content to replace.
         * @param updateRequest Content file update request
         * @return Business process
         */
        ContentClient.prototype.updateFile = function (contentId, updateRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contents/{contentId}/file";
            if (contentId === undefined || contentId === null)
                throw new Error("The parameter 'contentId' must be defined.");
            url_ = url_.replace("{contentId}", encodeURIComponent("" + contentId));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(updateRequest);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processUpdateFile(_response);
            });
        };
        ContentClient.prototype.processUpdateFile = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Update content metadata
         * @param contentId The content ID.
         * @param updateRequest Content metadata update request.
         * @param resolveBehaviors (optional) List of enums that control which parts of the content are resolved and returned.
         * @param allowMissingDependencies (optional) Allows storing references to list items or contents that don't exist in the system.
         * @param timeout (optional) Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
                    Only the waiting is aborted, and the calls returned.
         * @return Content detail
         */
        ContentClient.prototype.updateMetadata = function (contentId, updateRequest, resolveBehaviors, allowMissingDependencies, timeout) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contents/{contentId}/metadata?";
            if (contentId === undefined || contentId === null)
                throw new Error("The parameter 'contentId' must be defined.");
            url_ = url_.replace("{contentId}", encodeURIComponent("" + contentId));
            if (resolveBehaviors !== undefined)
                resolveBehaviors && resolveBehaviors.forEach(function (item) { url_ += "resolveBehaviors=" + encodeURIComponent("" + item) + "&"; });
            if (allowMissingDependencies === null)
                throw new Error("The parameter 'allowMissingDependencies' cannot be null.");
            else if (allowMissingDependencies !== undefined)
                url_ += "allowMissingDependencies=" + encodeURIComponent("" + allowMissingDependencies) + "&";
            if (timeout !== undefined)
                url_ += "timeout=" + encodeURIComponent("" + timeout) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(updateRequest);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processUpdateMetadata(_response);
            });
        };
        ContentClient.prototype.processUpdateMetadata = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Update content permissions
         * @param contentId The content ID.
         * @param updateRequest Content permissions update request.
         * @param resolveBehaviors (optional) List of enums that control which parts of the content are resolved and returned.
         * @param timeout (optional) Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
                    Only the waiting is aborted, and the calls returned.
         * @return Content detail
         */
        ContentClient.prototype.updatePermissions = function (contentId, updateRequest, resolveBehaviors, timeout) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contents/{contentId}/permissions?";
            if (contentId === undefined || contentId === null)
                throw new Error("The parameter 'contentId' must be defined.");
            url_ = url_.replace("{contentId}", encodeURIComponent("" + contentId));
            if (resolveBehaviors !== undefined)
                resolveBehaviors && resolveBehaviors.forEach(function (item) { url_ += "resolveBehaviors=" + encodeURIComponent("" + item) + "&"; });
            if (timeout !== undefined)
                url_ += "timeout=" + encodeURIComponent("" + timeout) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(updateRequest);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processUpdatePermissions(_response);
            });
        };
        ContentClient.prototype.processUpdatePermissions = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Update multiple content metadata
         * @param updateRequest Content metadata update many request.
         * @return Business process
         */
        ContentClient.prototype.updateMetadataMany = function (updateRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contents/many/metadata";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(updateRequest);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processUpdateMetadataMany(_response);
            });
        };
        ContentClient.prototype.processUpdateMetadataMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Update multiple contents permissions
         * @param updateManyRequest Content permissions update many request.
         * @return Business process
         */
        ContentClient.prototype.updatePermissionsMany = function (updateManyRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contents/many/permissions";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(updateManyRequest);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processUpdatePermissionsMany(_response);
            });
        };
        ContentClient.prototype.processUpdatePermissionsMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Transfer content ownership
         * @param contentId The content ID.
         * @param updateRequest Content ownership transfer request.
         * @param timeout (optional) Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
                    Only the waiting is aborted, and the calls returned.
         * @return Ok
         */
        ContentClient.prototype.transferOwnership = function (contentId, updateRequest, timeout) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contents/{contentId}/ownership?";
            if (contentId === undefined || contentId === null)
                throw new Error("The parameter 'contentId' must be defined.");
            url_ = url_.replace("{contentId}", encodeURIComponent("" + contentId));
            if (timeout !== undefined)
                url_ += "timeout=" + encodeURIComponent("" + timeout) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(updateRequest);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processTransferOwnership(_response);
            });
        };
        ContentClient.prototype.processTransferOwnership = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Transfer multiple contents ownerships
         * @param contentOwnershipTransferManyRequest Content ownership transfer many request.
         * @return Business process
         */
        ContentClient.prototype.transferOwnershipMany = function (contentOwnershipTransferManyRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contents/many/ownership";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(contentOwnershipTransferManyRequest);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processTransferOwnershipMany(_response);
            });
        };
        ContentClient.prototype.processTransferOwnershipMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Batch update content fields - by IDs
         * @param updateRequest Content fields batch update request.
         * @return Business process
         */
        ContentClient.prototype.batchUpdateFieldsByIds = function (updateRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contents/batches/fields/ids";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(updateRequest);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processBatchUpdateFieldsByIds(_response);
            });
        };
        ContentClient.prototype.processBatchUpdateFieldsByIds = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Batch update fields - by filter
         * @param updateRequest Content fields batch update filter request. It contains the changes that need to be applied to the contents and the filter request to identify the contents.
         * @return Business process
         */
        ContentClient.prototype.batchUpdateFieldsByFilter = function (updateRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contents/batches/fields/filter";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(updateRequest);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processBatchUpdateFieldsByFilter(_response);
            });
        };
        ContentClient.prototype.processBatchUpdateFieldsByFilter = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return ContentClient;
    }(PictureparkClientBase));
    exports.ContentClient = ContentClient;
    var ContentPermissionSetClient = /** @class */ (function (_super) {
        __extends(ContentPermissionSetClient, _super);
        function ContentPermissionSetClient(configuration, baseUrl, http) {
            var _this = _super.call(this, configuration) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = _this.getBaseUrl("", baseUrl);
            return _this;
        }
        /**
         * Get content permission set
         * @param permissionSetId The content permission set ID.
         * @return Content permission set detail
         */
        ContentPermissionSetClient.prototype.get = function (permissionSetId) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contentPermissionSets/{permissionSetId}";
            if (permissionSetId === undefined || permissionSetId === null)
                throw new Error("The parameter 'permissionSetId' must be defined.");
            url_ = url_.replace("{permissionSetId}", encodeURIComponent("" + permissionSetId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGet(_response);
            });
        };
        ContentPermissionSetClient.prototype.processGet = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Create content permission set
         * @param request The request containing information needed to create new permission set.
         * @return Content permission set detail
         */
        ContentPermissionSetClient.prototype.create = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contentPermissionSets";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processCreate(_response);
            });
        };
        ContentPermissionSetClient.prototype.processCreate = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Get multiple permission sets
         * @param ids (optional) Permission set IDs to get information about
         * @return Content permission set details
         */
        ContentPermissionSetClient.prototype.getMany = function (ids) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contentPermissionSets?";
            if (ids === null)
                throw new Error("The parameter 'ids' cannot be null.");
            else if (ids !== undefined)
                ids && ids.forEach(function (item) { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetMany(_response);
            });
        };
        ContentPermissionSetClient.prototype.processGetMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Update content permission set
         * @param id ID of permission set to update
         * @param request The request containing information needed to update the permission set.
         * @return Content permission set detail
         */
        ContentPermissionSetClient.prototype.update = function (id, request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contentPermissionSets/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processUpdate(_response);
            });
        };
        ContentPermissionSetClient.prototype.processUpdate = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Delete content permission set
         * @param id ID of the permission set that should be deleted.
         * @return OK
         */
        ContentPermissionSetClient.prototype.delete = function (id) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contentPermissionSets/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: {}
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDelete(_response);
            });
        };
        ContentPermissionSetClient.prototype.processDelete = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Transfer ownership of content permission set
         * @param id ID of the permission set to transfer
         * @param request The request containing user who should be the new owner.
         * @return OK
         */
        ContentPermissionSetClient.prototype.transferOwnership = function (id, request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contentPermissionSets/{id}/ownership";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processTransferOwnership(_response);
            });
        };
        ContentPermissionSetClient.prototype.processTransferOwnership = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Get permissions for the permission set
         * @param id ID of the permission set to view permissions of.
         * @return List of permissions
         */
        ContentPermissionSetClient.prototype.getPermissions = function (id) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contentPermissionSets/{id}/permissions";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetPermissions(_response);
            });
        };
        ContentPermissionSetClient.prototype.processGetPermissions = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Create multiple content permission sets
         * @param request The request containing information needed to create new permission sets.
         * @return Bulk response with information about created permission sets
         */
        ContentPermissionSetClient.prototype.createMany = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contentPermissionSets/many";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processCreateMany(_response);
            });
        };
        ContentPermissionSetClient.prototype.processCreateMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Update multiple content permission sets
         * @param request The request containing information needed to update the permission set.
         * @return Bulk response with information about updated permission sets
         */
        ContentPermissionSetClient.prototype.updateMany = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contentPermissionSets/many";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processUpdateMany(_response);
            });
        };
        ContentPermissionSetClient.prototype.processUpdateMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Delete multiple content permission sets
         * @param request The request with permission set IDs to delete.
         * @return Bulk response with information about success or failure
         */
        ContentPermissionSetClient.prototype.deleteMany = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contentPermissionSets/many/delete";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteMany(_response);
            });
        };
        ContentPermissionSetClient.prototype.processDeleteMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Transfer ownership of multiple content permission sets
         * @param request The request containing information on which permission set to transfer to which user.
         * @return OK
         */
        ContentPermissionSetClient.prototype.transferOwnershipMany = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contentPermissionSets/many/ownership";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processTransferOwnershipMany(_response);
            });
        };
        ContentPermissionSetClient.prototype.processTransferOwnershipMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Get permissions for multiple permission sets
         * @param ids (optional) IDs of the permission sets to view permissions of.
         * @return List of permissions
         */
        ContentPermissionSetClient.prototype.getPermissionsMany = function (ids) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contentPermissionSets/many/permissions?";
            if (ids === null)
                throw new Error("The parameter 'ids' cannot be null.");
            else if (ids !== undefined)
                ids && ids.forEach(function (item) { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetPermissionsMany(_response);
            });
        };
        ContentPermissionSetClient.prototype.processGetPermissionsMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Search content permission sets
         * @param request The permission set search request.
         * @return Permission set search result
         */
        ContentPermissionSetClient.prototype.search = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/contentPermissionSets/search";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processSearch(_response);
            });
        };
        ContentPermissionSetClient.prototype.processSearch = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return ContentPermissionSetClient;
    }(PictureparkClientBase));
    exports.ContentPermissionSetClient = ContentPermissionSetClient;
    var DocumentHistoryClient = /** @class */ (function (_super) {
        __extends(DocumentHistoryClient, _super);
        function DocumentHistoryClient(configuration, baseUrl, http) {
            var _this = _super.call(this, configuration) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = _this.getBaseUrl("", baseUrl);
            return _this;
        }
        /**
         * Search
         * @param documentHistorySearchRequest The document history search request.
         * @return Document history search result.
         */
        DocumentHistoryClient.prototype.search = function (documentHistorySearchRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/history/search";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(documentHistorySearchRequest);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processSearch(_response);
            });
        };
        DocumentHistoryClient.prototype.processSearch = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Get current
         * @param documentType The type of the document (e.g. Content).
         * @param documentId The ID of the document (e.g. contentId).
         * @return Document history item
         */
        DocumentHistoryClient.prototype.getCurrent = function (documentType, documentId) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/history/{documentType}/{documentId}/current";
            if (documentType === undefined || documentType === null)
                throw new Error("The parameter 'documentType' must be defined.");
            url_ = url_.replace("{documentType}", encodeURIComponent("" + documentType));
            if (documentId === undefined || documentId === null)
                throw new Error("The parameter 'documentId' must be defined.");
            url_ = url_.replace("{documentId}", encodeURIComponent("" + documentId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetCurrent(_response);
            });
        };
        DocumentHistoryClient.prototype.processGetCurrent = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Get version
         * @param documentType The type of the document (e.g. Content).
         * @param documentId The ID of the document (e.g. contentId).
         * @param documentVersion The version of the document.
         * @return Document history item
         */
        DocumentHistoryClient.prototype.getVersion = function (documentType, documentId, documentVersion) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/history/{documentType}/{documentId}/{documentVersion}";
            if (documentType === undefined || documentType === null)
                throw new Error("The parameter 'documentType' must be defined.");
            url_ = url_.replace("{documentType}", encodeURIComponent("" + documentType));
            if (documentId === undefined || documentId === null)
                throw new Error("The parameter 'documentId' must be defined.");
            url_ = url_.replace("{documentId}", encodeURIComponent("" + documentId));
            if (documentVersion === undefined || documentVersion === null)
                throw new Error("The parameter 'documentVersion' must be defined.");
            url_ = url_.replace("{documentVersion}", encodeURIComponent("" + documentVersion));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetVersion(_response);
            });
        };
        DocumentHistoryClient.prototype.processGetVersion = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Compare with current
         * @param documentType The type of the document (e.g. Content).
         * @param documentId The ID of the document (e.g. contentId).
         * @param version (optional) The version of the document to compare with.
         * @return Document history difference.
         */
        DocumentHistoryClient.prototype.compareWithCurrent = function (documentType, documentId, version) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/history/{documentType}/{documentId}/current/compare?";
            if (documentType === undefined || documentType === null)
                throw new Error("The parameter 'documentType' must be defined.");
            url_ = url_.replace("{documentType}", encodeURIComponent("" + documentType));
            if (documentId === undefined || documentId === null)
                throw new Error("The parameter 'documentId' must be defined.");
            url_ = url_.replace("{documentId}", encodeURIComponent("" + documentId));
            if (version === null)
                throw new Error("The parameter 'version' cannot be null.");
            else if (version !== undefined)
                url_ += "version=" + encodeURIComponent("" + version) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processCompareWithCurrent(_response);
            });
        };
        DocumentHistoryClient.prototype.processCompareWithCurrent = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Compare with version
         * @param documentType The type of the document (e.g. Content).
         * @param documentId The ID of the document (e.g. contentId).
         * @param documentVersion The version of the document to use for the comparison.
         * @param version (optional) The version of the document to compare with.
         * @return Document history difference
         */
        DocumentHistoryClient.prototype.compareWithVersion = function (documentType, documentId, documentVersion, version) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/history/{documentType}/{documentId}/{documentVersion}/compare?";
            if (documentType === undefined || documentType === null)
                throw new Error("The parameter 'documentType' must be defined.");
            url_ = url_.replace("{documentType}", encodeURIComponent("" + documentType));
            if (documentId === undefined || documentId === null)
                throw new Error("The parameter 'documentId' must be defined.");
            url_ = url_.replace("{documentId}", encodeURIComponent("" + documentId));
            if (documentVersion === undefined || documentVersion === null)
                throw new Error("The parameter 'documentVersion' must be defined.");
            url_ = url_.replace("{documentVersion}", encodeURIComponent("" + documentVersion));
            if (version === null)
                throw new Error("The parameter 'version' cannot be null.");
            else if (version !== undefined)
                url_ += "version=" + encodeURIComponent("" + version) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processCompareWithVersion(_response);
            });
        };
        DocumentHistoryClient.prototype.processCompareWithVersion = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return DocumentHistoryClient;
    }(PictureparkClientBase));
    exports.DocumentHistoryClient = DocumentHistoryClient;
    var InfoClient = /** @class */ (function (_super) {
        __extends(InfoClient, _super);
        function InfoClient(configuration, baseUrl, http) {
            var _this = _super.call(this, configuration) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = _this.getBaseUrl("", baseUrl);
            return _this;
        }
        /**
         * Get info
         * @return CustomerInfo
         */
        InfoClient.prototype.getInfo = function () {
            var _this = this;
            var url_ = this.baseUrl + "/v1/info/customer";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetInfo(_response);
            });
        };
        InfoClient.prototype.processGetInfo = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Get version
         * @return VersionInfo
         */
        InfoClient.prototype.getVersion = function () {
            var _this = this;
            var url_ = this.baseUrl + "/v1/info/version";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetVersion(_response);
            });
        };
        InfoClient.prototype.processGetVersion = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return InfoClient;
    }(PictureparkClientBase));
    exports.InfoClient = InfoClient;
    var JsonSchemaClient = /** @class */ (function (_super) {
        __extends(JsonSchemaClient, _super);
        function JsonSchemaClient(configuration, baseUrl, http) {
            var _this = _super.call(this, configuration) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = _this.getBaseUrl("", baseUrl);
            return _this;
        }
        /**
         * Get json schema
         * @param schemaId The ID of the schema whose json schema to retrieve.
         * @return Json schema view item: almost a 1:1 representation of the Newtonsoft json schema.
         */
        JsonSchemaClient.prototype.get = function (schemaId) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/jsonSchemas/{schemaId}";
            if (schemaId === undefined || schemaId === null)
                throw new Error("The parameter 'schemaId' must be defined.");
            url_ = url_.replace("{schemaId}", encodeURIComponent("" + schemaId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGet(_response);
            });
        };
        JsonSchemaClient.prototype.processGet = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return JsonSchemaClient;
    }(PictureparkClientBase));
    exports.JsonSchemaClient = JsonSchemaClient;
    var ListItemClient = /** @class */ (function (_super) {
        __extends(ListItemClient, _super);
        function ListItemClient(configuration, baseUrl, http) {
            var _this = _super.call(this, configuration) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = _this.getBaseUrl("", baseUrl);
            return _this;
        }
        /**
         * Get list item
         * @param listItemId The list item ID.
         * @param resolveBehaviors (optional) List of enums that control which parts of the list item are resolved and returned.
         * @return List item detail
         */
        ListItemClient.prototype.get = function (listItemId, resolveBehaviors) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/listItems/{listItemId}?";
            if (listItemId === undefined || listItemId === null)
                throw new Error("The parameter 'listItemId' must be defined.");
            url_ = url_.replace("{listItemId}", encodeURIComponent("" + listItemId));
            if (resolveBehaviors !== undefined)
                resolveBehaviors && resolveBehaviors.forEach(function (item) { url_ += "resolveBehaviors=" + encodeURIComponent("" + item) + "&"; });
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGet(_response);
            });
        };
        ListItemClient.prototype.processGet = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Update list item
         * @param listItemId The list item ID.
         * @param updateRequest The list item update request.
         * @param resolveBehaviors (optional) List of enums that control which parts of the list item are resolved and returned.
         * @param allowMissingDependencies (optional) Allows creating list items that refer to list items or contents that don't exist in the system.
         * @param timeout (optional) Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
                    Only the waiting is aborted, and the calls returned.
         * @return List item detail
         */
        ListItemClient.prototype.update = function (listItemId, updateRequest, resolveBehaviors, allowMissingDependencies, timeout) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/listItems/{listItemId}?";
            if (listItemId === undefined || listItemId === null)
                throw new Error("The parameter 'listItemId' must be defined.");
            url_ = url_.replace("{listItemId}", encodeURIComponent("" + listItemId));
            if (resolveBehaviors !== undefined)
                resolveBehaviors && resolveBehaviors.forEach(function (item) { url_ += "resolveBehaviors=" + encodeURIComponent("" + item) + "&"; });
            if (allowMissingDependencies === null)
                throw new Error("The parameter 'allowMissingDependencies' cannot be null.");
            else if (allowMissingDependencies !== undefined)
                url_ += "allowMissingDependencies=" + encodeURIComponent("" + allowMissingDependencies) + "&";
            if (timeout !== undefined)
                url_ += "timeout=" + encodeURIComponent("" + timeout) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(updateRequest);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processUpdate(_response);
            });
        };
        ListItemClient.prototype.processUpdate = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Delete list item
         * @param listItemId The ID of the list item to delete.
         * @param forceReferenceRemoval (optional) A value indicating whether references to the list item should be removed.
         * @param timeout (optional) Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
                    Only the waiting is aborted, and the calls returned.
         * @return Ok
         */
        ListItemClient.prototype.delete = function (listItemId, forceReferenceRemoval, timeout) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/listItems/{listItemId}?";
            if (listItemId === undefined || listItemId === null)
                throw new Error("The parameter 'listItemId' must be defined.");
            url_ = url_.replace("{listItemId}", encodeURIComponent("" + listItemId));
            if (forceReferenceRemoval !== undefined)
                url_ += "forceReferenceRemoval=" + encodeURIComponent("" + forceReferenceRemoval) + "&";
            if (timeout !== undefined)
                url_ += "timeout=" + encodeURIComponent("" + timeout) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: {}
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDelete(_response);
            });
        };
        ListItemClient.prototype.processDelete = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Get multiple list items
         * @param ids List of list item IDs.
         * @param resolveBehaviors (optional) List of enums that control which parts of the list items are resolved and returned.
         * @return List of list item details
         */
        ListItemClient.prototype.getMany = function (ids, resolveBehaviors) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/listItems?";
            if (ids === undefined)
                throw new Error("The parameter 'ids' must be defined.");
            else
                ids && ids.forEach(function (item) { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
            if (resolveBehaviors !== undefined)
                resolveBehaviors && resolveBehaviors.forEach(function (item) { url_ += "resolveBehaviors=" + encodeURIComponent("" + item) + "&"; });
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetMany(_response);
            });
        };
        ListItemClient.prototype.processGetMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Create list item
         * @param listItemCreateRequest List item create request.
         * @param resolveBehaviors (optional) List of enums that control which parts of the list item are resolved and returned.
         * @param allowMissingDependencies (optional) Allows creating list items that refer to list items or contents that don't exist in the system.
         * @param timeout (optional) Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
                    Only the waiting is aborted, and the calls returned.
         * @return List item detail
         */
        ListItemClient.prototype.create = function (listItemCreateRequest, resolveBehaviors, allowMissingDependencies, timeout) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/listItems?";
            if (resolveBehaviors !== undefined)
                resolveBehaviors && resolveBehaviors.forEach(function (item) { url_ += "resolveBehaviors=" + encodeURIComponent("" + item) + "&"; });
            if (allowMissingDependencies === null)
                throw new Error("The parameter 'allowMissingDependencies' cannot be null.");
            else if (allowMissingDependencies !== undefined)
                url_ += "allowMissingDependencies=" + encodeURIComponent("" + allowMissingDependencies) + "&";
            if (timeout !== undefined)
                url_ += "timeout=" + encodeURIComponent("" + timeout) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(listItemCreateRequest);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processCreate(_response);
            });
        };
        ListItemClient.prototype.processCreate = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Search list items
         * @param listItemSearchRequest The list item search request.
         * @return List item search result
         */
        ListItemClient.prototype.search = function (listItemSearchRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/listItems/search";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(listItemSearchRequest);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processSearch(_response);
            });
        };
        ListItemClient.prototype.processSearch = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Aggregate list items
         * @param listItemAggregationRequest The list item aggregation request.
         * @return Object aggregation result
         */
        ListItemClient.prototype.aggregate = function (listItemAggregationRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/listItems/aggregate";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(listItemAggregationRequest);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processAggregate(_response);
            });
        };
        ListItemClient.prototype.processAggregate = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Create multiple list items
         * @param listItemCreateManyRequest List item create many request.
         * @return Business process
         */
        ListItemClient.prototype.createMany = function (listItemCreateManyRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/listItems/many";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(listItemCreateManyRequest);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processCreateMany(_response);
            });
        };
        ListItemClient.prototype.processCreateMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Update multiple list items
         * @param listItemUpdateManyRequest List item update many request.
         * @return Business process
         */
        ListItemClient.prototype.updateMany = function (listItemUpdateManyRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/listItems/many";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(listItemUpdateManyRequest);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processUpdateMany(_response);
            });
        };
        ListItemClient.prototype.processUpdateMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Delete multiple list items
         * @param deleteManyRequest List item delete many request.
         * @return Business process
         */
        ListItemClient.prototype.deleteMany = function (deleteManyRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/listItems/many/delete";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(deleteManyRequest);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteMany(_response);
            });
        };
        ListItemClient.prototype.processDeleteMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Delete multiple list items - by filter
         * @param deleteManyFilterRequest Delete many by filter request.
         * @return Business process
         */
        ListItemClient.prototype.deleteManyByFilter = function (deleteManyFilterRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/listItems/many/delete/filter";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(deleteManyFilterRequest);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteManyByFilter(_response);
            });
        };
        ListItemClient.prototype.processDeleteManyByFilter = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Restore list item
         * @param listItemId The list item ID.
         * @param allowMissingDependencies (optional) Allows restoring list items that refer to list items or contents that don't exist in the system.
         * @param timeout (optional) Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
                    Only the waiting is aborted, and the calls returned.
         * @return Ok
         */
        ListItemClient.prototype.restore = function (listItemId, allowMissingDependencies, timeout) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/listItems/{listItemId}/restore?";
            if (listItemId === undefined || listItemId === null)
                throw new Error("The parameter 'listItemId' must be defined.");
            url_ = url_.replace("{listItemId}", encodeURIComponent("" + listItemId));
            if (allowMissingDependencies === null)
                throw new Error("The parameter 'allowMissingDependencies' cannot be null.");
            else if (allowMissingDependencies !== undefined)
                url_ += "allowMissingDependencies=" + encodeURIComponent("" + allowMissingDependencies) + "&";
            if (timeout !== undefined)
                url_ += "timeout=" + encodeURIComponent("" + timeout) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "POST",
                headers: {}
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processRestore(_response);
            });
        };
        ListItemClient.prototype.processRestore = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Restore multiple list items
         * @param restoreManyRequest List item restore many request.
         * @return Business process
         */
        ListItemClient.prototype.restoreMany = function (restoreManyRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/listItems/many/restore";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(restoreManyRequest);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processRestoreMany(_response);
            });
        };
        ListItemClient.prototype.processRestoreMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Batch update fields - by IDs
         * @param updateRequest List item fields batch update request.
         * @return Business process
         */
        ListItemClient.prototype.batchUpdateFieldsByIds = function (updateRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/listItems/batches/fields/ids";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(updateRequest);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processBatchUpdateFieldsByIds(_response);
            });
        };
        ListItemClient.prototype.processBatchUpdateFieldsByIds = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Batch update fields - by filter
         * @param updateRequest List item fields batch update by filter request.
         * @return Business process
         */
        ListItemClient.prototype.batchUpdateFieldsByFilter = function (updateRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/listItems/batches/fields/filter";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(updateRequest);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processBatchUpdateFieldsByFilter(_response);
            });
        };
        ListItemClient.prototype.processBatchUpdateFieldsByFilter = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Get list item references
         * @param listItemId The ID of the list item.
         * @param listItemReferencesRequest Request options to specify how many references to fetch.
         * @return List item references
         */
        ListItemClient.prototype.getReferencesToListItem = function (listItemId, listItemReferencesRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/listItems/{listItemId}/references/search";
            if (listItemId === undefined || listItemId === null)
                throw new Error("The parameter 'listItemId' must be defined.");
            url_ = url_.replace("{listItemId}", encodeURIComponent("" + listItemId));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(listItemReferencesRequest);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetReferencesToListItem(_response);
            });
        };
        ListItemClient.prototype.processGetReferencesToListItem = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Get multiple list items references
         * @param listItemManyReferencesRequest ListItemManyReferencesRequest
         * @return A list of references per list item.
         */
        ListItemClient.prototype.getReferencesToListItems = function (listItemManyReferencesRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/listItems/many/references/search";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(listItemManyReferencesRequest);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetReferencesToListItems(_response);
            });
        };
        ListItemClient.prototype.processGetReferencesToListItems = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return ListItemClient;
    }(PictureparkClientBase));
    exports.ListItemClient = ListItemClient;
    var LiveStreamClient = /** @class */ (function (_super) {
        __extends(LiveStreamClient, _super);
        function LiveStreamClient(configuration, baseUrl, http) {
            var _this = _super.call(this, configuration) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = _this.getBaseUrl("", baseUrl);
            return _this;
        }
        /**
         * This endpoint cannot be used. It is kept to generate LiveStream message contracts.
         * @return OK
         * @deprecated
         */
        LiveStreamClient.prototype.getMessage = function () {
            var _this = this;
            var url_ = this.baseUrl + "/v1/liveStream/message";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetMessage(_response);
            });
        };
        LiveStreamClient.prototype.processGetMessage = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Search
         * @param request Parameters for the search
         * @return Resulting live stream events
         */
        LiveStreamClient.prototype.search = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/liveStream/search";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processSearch(_response);
            });
        };
        LiveStreamClient.prototype.processSearch = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return LiveStreamClient;
    }(PictureparkClientBase));
    exports.LiveStreamClient = LiveStreamClient;
    var OutputClient = /** @class */ (function (_super) {
        __extends(OutputClient, _super);
        function OutputClient(configuration, baseUrl, http) {
            var _this = _super.call(this, configuration) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = _this.getBaseUrl("", baseUrl);
            return _this;
        }
        /**
         * Search output documents
         * @param outputSearchRequest The output search request.
         * @return Output result set.
         */
        OutputClient.prototype.search = function (outputSearchRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/outputs/search";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(outputSearchRequest);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processSearch(_response);
            });
        };
        OutputClient.prototype.processSearch = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Get - single
         * @param outputId The output id.
         * @return OutputDetail
         */
        OutputClient.prototype.get = function (outputId) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/outputs/{outputId}";
            if (outputId === undefined || outputId === null)
                throw new Error("The parameter 'outputId' must be defined.");
            url_ = url_.replace("{outputId}", encodeURIComponent("" + outputId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGet(_response);
            });
        };
        OutputClient.prototype.processGet = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Resets retry attempts counter on failed (optionally also completed) outputs and they will be subsequently picked up for re-rendering.
         * @param request Request containing options to filter which outputs should be reset.
         * @return Business process tracking the resetting
         */
        OutputClient.prototype.resetRetryAttempts = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/outputs/resetRetryAttempts";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processResetRetryAttempts(_response);
            });
        };
        OutputClient.prototype.processResetRetryAttempts = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return OutputClient;
    }(PictureparkClientBase));
    exports.OutputClient = OutputClient;
    var OutputFormatClient = /** @class */ (function (_super) {
        __extends(OutputFormatClient, _super);
        function OutputFormatClient(configuration, baseUrl, http) {
            var _this = _super.call(this, configuration) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = _this.getBaseUrl("", baseUrl);
            return _this;
        }
        /**
         * Get output format
         * @param id The output format ID.
         * @return Output format
         */
        OutputFormatClient.prototype.get = function (id) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/outputFormats/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGet(_response);
            });
        };
        OutputFormatClient.prototype.processGet = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Update output format
         * @param id ID of output format to update
         * @param request The request containing information needed to update the output format.
         * @return Updated output format
         */
        OutputFormatClient.prototype.update = function (id, request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/outputFormats/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processUpdate(_response);
            });
        };
        OutputFormatClient.prototype.processUpdate = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Delete output format
         * @param id ID of the output format that should be deleted.
         * @return OK
         */
        OutputFormatClient.prototype.delete = function (id) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/outputFormats/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: {}
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDelete(_response);
            });
        };
        OutputFormatClient.prototype.processDelete = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Create output format
         * @param request The request containing information needed to create new output format.
         * @return Output format
         */
        OutputFormatClient.prototype.create = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/outputFormats";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processCreate(_response);
            });
        };
        OutputFormatClient.prototype.processCreate = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Get multiple output formats
         * @param ids (optional) Output format IDs to get information about. If this is omitted, all output formats in the system will be returned.
         * @return Output formats
         */
        OutputFormatClient.prototype.getMany = function (ids) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/outputFormats?";
            if (ids !== undefined)
                ids && ids.forEach(function (item) { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetMany(_response);
            });
        };
        OutputFormatClient.prototype.processGetMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Create multiple output formats
         * @param request The request containing information needed to create new output formats.
         * @return Bulk response with information about created output formats
         */
        OutputFormatClient.prototype.createMany = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/outputFormats/many";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processCreateMany(_response);
            });
        };
        OutputFormatClient.prototype.processCreateMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Update multiple output formats
         * @param request The request containing information needed to update the output format.
         * @return Bulk response with information about updated output formats
         */
        OutputFormatClient.prototype.updateMany = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/outputFormats/many";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processUpdateMany(_response);
            });
        };
        OutputFormatClient.prototype.processUpdateMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Delete multiple output formats
         * @param request The request with output formats IDs to delete.
         * @return Bulk response with information about success or failure
         */
        OutputFormatClient.prototype.deleteMany = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/outputFormats/many/delete";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteMany(_response);
            });
        };
        OutputFormatClient.prototype.processDeleteMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return OutputFormatClient;
    }(PictureparkClientBase));
    exports.OutputFormatClient = OutputFormatClient;
    var ProfileClient = /** @class */ (function (_super) {
        __extends(ProfileClient, _super);
        function ProfileClient(configuration, baseUrl, http) {
            var _this = _super.call(this, configuration) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = _this.getBaseUrl("", baseUrl);
            return _this;
        }
        /**
         * Get
         * @return User profile
         */
        ProfileClient.prototype.get = function () {
            var _this = this;
            var url_ = this.baseUrl + "/v1/profile";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGet(_response);
            });
        };
        ProfileClient.prototype.processGet = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Update
         * @return Updated user profile
         */
        ProfileClient.prototype.update = function (updateRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/profile";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(updateRequest);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processUpdate(_response);
            });
        };
        ProfileClient.prototype.processUpdate = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Request deletion
         * @return OK
         */
        ProfileClient.prototype.requestDeletion = function () {
            var _this = this;
            var url_ = this.baseUrl + "/v1/profile/requestDeletion";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "POST",
                headers: {}
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processRequestDeletion(_response);
            });
        };
        ProfileClient.prototype.processRequestDeletion = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return ProfileClient;
    }(PictureparkClientBase));
    exports.ProfileClient = ProfileClient;
    var SchemaClient = /** @class */ (function (_super) {
        __extends(SchemaClient, _super);
        function SchemaClient(configuration, baseUrl, http) {
            var _this = _super.call(this, configuration) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = _this.getBaseUrl("", baseUrl);
            return _this;
        }
        /**
         * Get schema
         * @param schemaId The schema ID.
         * @return Schema detail
         */
        SchemaClient.prototype.get = function (schemaId) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/schemas/{schemaId}";
            if (schemaId === undefined || schemaId === null)
                throw new Error("The parameter 'schemaId' must be defined.");
            url_ = url_.replace("{schemaId}", encodeURIComponent("" + schemaId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGet(_response);
            });
        };
        SchemaClient.prototype.processGet = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Update schema
         * @param schemaId The schema ID.
         * @param schema The schema update request.
         * @param timeout (optional) Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
                    Only the waiting is aborted, and the calls returned.
         * @return Schema update result, containing the updated schema
         */
        SchemaClient.prototype.update = function (schemaId, schema, timeout) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/schemas/{schemaId}?";
            if (schemaId === undefined || schemaId === null)
                throw new Error("The parameter 'schemaId' must be defined.");
            url_ = url_.replace("{schemaId}", encodeURIComponent("" + schemaId));
            if (timeout !== undefined)
                url_ += "timeout=" + encodeURIComponent("" + timeout) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(schema);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processUpdate(_response);
            });
        };
        SchemaClient.prototype.processUpdate = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Delete schema
         * @param schemaId The schema ID.
         * @param timeout (optional) Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
                    Only the waiting is aborted, and the calls returned.
         * @return Schema delete result
         */
        SchemaClient.prototype.delete = function (schemaId, timeout) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/schemas/{schemaId}?";
            if (schemaId === undefined || schemaId === null)
                throw new Error("The parameter 'schemaId' must be defined.");
            url_ = url_.replace("{schemaId}", encodeURIComponent("" + schemaId));
            if (timeout !== undefined)
                url_ += "timeout=" + encodeURIComponent("" + timeout) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDelete(_response);
            });
        };
        SchemaClient.prototype.processDelete = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Get multiple schemas
         * @param ids (optional) Comma separated list of schema IDs.
         * @return List of schema details
         */
        SchemaClient.prototype.getMany = function (ids) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/schemas?";
            if (ids !== undefined)
                ids && ids.forEach(function (item) { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetMany(_response);
            });
        };
        SchemaClient.prototype.processGetMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Create schema
         * @param schema The schema create request.
         * @param timeout (optional) Maximum time to wait for the operation to complete. If timeout is exceeded, the operation is not aborted but continues anyhow.
                    Only the waiting is aborted, and the calls returned.
         * @return Schema create result, containing the created schema
         */
        SchemaClient.prototype.create = function (schema, timeout) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/schemas?";
            if (timeout !== undefined)
                url_ += "timeout=" + encodeURIComponent("" + timeout) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(schema);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processCreate(_response);
            });
        };
        SchemaClient.prototype.processCreate = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Search schemas
         * @param schemaSearchRequest The schema search request.
         * @return Schema search result
         */
        SchemaClient.prototype.search = function (schemaSearchRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/schemas/search";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(schemaSearchRequest);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processSearch(_response);
            });
        };
        SchemaClient.prototype.processSearch = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Search index fields
         * @param request The search request.
         * @return Indexed fields
         */
        SchemaClient.prototype.getIndexFields = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/schemas/indexFields/searchBySchemaIds";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetIndexFields(_response);
            });
        };
        SchemaClient.prototype.processGetIndexFields = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Exists schema
         * @param schemaId The schema ID.
         * @return Schema Exists response
         */
        SchemaClient.prototype.exists = function (schemaId) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/schemas/{schemaId}/exists";
            if (schemaId === undefined || schemaId === null)
                throw new Error("The parameter 'schemaId' must be defined.");
            url_ = url_.replace("{schemaId}", encodeURIComponent("" + schemaId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processExists(_response);
            });
        };
        SchemaClient.prototype.processExists = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Exists field in schema
         * @param schemaId The schema ID.
         * @param fieldId The field ID.
         * @return Field Exists response
         */
        SchemaClient.prototype.fieldExists = function (schemaId, fieldId) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/schemas/{schemaId}/{fieldId}/exists";
            if (schemaId === undefined || schemaId === null)
                throw new Error("The parameter 'schemaId' must be defined.");
            url_ = url_.replace("{schemaId}", encodeURIComponent("" + schemaId));
            if (fieldId === undefined || fieldId === null)
                throw new Error("The parameter 'fieldId' must be defined.");
            url_ = url_.replace("{fieldId}", encodeURIComponent("" + fieldId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processFieldExists(_response);
            });
        };
        SchemaClient.prototype.processFieldExists = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Gets all schemas referenced by the schema specified in
         * @param schemaId The schema ID.
         * @return Referenced schema details
         */
        SchemaClient.prototype.getReferenced = function (schemaId) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/schemas/{schemaId}/referenced";
            if (schemaId === undefined || schemaId === null)
                throw new Error("The parameter 'schemaId' must be defined.");
            url_ = url_.replace("{schemaId}", encodeURIComponent("" + schemaId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetReferenced(_response);
            });
        };
        SchemaClient.prototype.processGetReferenced = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Transfer ownership
         * @param schemaId The schema ID.
         * @param request Request detailing which user to transfer to.
         * @return OK
         */
        SchemaClient.prototype.transferOwnership = function (schemaId, request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/schemas/{schemaId}/ownership";
            if (schemaId === undefined || schemaId === null)
                throw new Error("The parameter 'schemaId' must be defined.");
            url_ = url_.replace("{schemaId}", encodeURIComponent("" + schemaId));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processTransferOwnership(_response);
            });
        };
        SchemaClient.prototype.processTransferOwnership = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Gets all schemas referenced by the schemas specified in
         * @param ids (optional) The schema IDs.
         * @return Referenced schema details
         */
        SchemaClient.prototype.getManyReferenced = function (ids) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/schemas/many/referenced?";
            if (ids === null)
                throw new Error("The parameter 'ids' cannot be null.");
            else if (ids !== undefined)
                ids && ids.forEach(function (item) { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetManyReferenced(_response);
            });
        };
        SchemaClient.prototype.processGetManyReferenced = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Create multiple schemas
         * @param schemas The schema create many request.
         * @return BusinessProcess which can be awaited.
         */
        SchemaClient.prototype.createMany = function (schemas) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/schemas/many";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(schemas);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processCreateMany(_response);
            });
        };
        SchemaClient.prototype.processCreateMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Transfer ownership of multiple schemas
         * @param request Schema ownership transfer many request.
         * @return Business process
         */
        SchemaClient.prototype.transferOwnershipMany = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/schemas/many/ownership";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processTransferOwnershipMany(_response);
            });
        };
        SchemaClient.prototype.processTransferOwnershipMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return SchemaClient;
    }(PictureparkClientBase));
    exports.SchemaClient = SchemaClient;
    var SchemaPermissionSetClient = /** @class */ (function (_super) {
        __extends(SchemaPermissionSetClient, _super);
        function SchemaPermissionSetClient(configuration, baseUrl, http) {
            var _this = _super.call(this, configuration) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = _this.getBaseUrl("", baseUrl);
            return _this;
        }
        /**
         * Get schema permission set
         * @param permissionSetId The schema permission set ID.
         * @return Schema permission set detail
         */
        SchemaPermissionSetClient.prototype.get = function (permissionSetId) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/schemaPermissionSets/{permissionSetId}";
            if (permissionSetId === undefined || permissionSetId === null)
                throw new Error("The parameter 'permissionSetId' must be defined.");
            url_ = url_.replace("{permissionSetId}", encodeURIComponent("" + permissionSetId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGet(_response);
            });
        };
        SchemaPermissionSetClient.prototype.processGet = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Create schema permission set
         * @param request The request containing information needed to create new permission set.
         * @return Schema permission set detail
         */
        SchemaPermissionSetClient.prototype.create = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/schemaPermissionSets";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processCreate(_response);
            });
        };
        SchemaPermissionSetClient.prototype.processCreate = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Get multiple permission sets
         * @param ids (optional) Permission set IDs to get information about
         * @return Schema permission set details
         */
        SchemaPermissionSetClient.prototype.getMany = function (ids) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/schemaPermissionSets?";
            if (ids === null)
                throw new Error("The parameter 'ids' cannot be null.");
            else if (ids !== undefined)
                ids && ids.forEach(function (item) { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetMany(_response);
            });
        };
        SchemaPermissionSetClient.prototype.processGetMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Update schema permission set
         * @param id ID of permission set to update
         * @param request The request containing information needed to update the permission set.
         * @return Schema permission set detail
         */
        SchemaPermissionSetClient.prototype.update = function (id, request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/schemaPermissionSets/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processUpdate(_response);
            });
        };
        SchemaPermissionSetClient.prototype.processUpdate = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Delete schema permission set
         * @param id ID of the permission set that should be deleted.
         * @return OK
         */
        SchemaPermissionSetClient.prototype.delete = function (id) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/schemaPermissionSets/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: {}
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDelete(_response);
            });
        };
        SchemaPermissionSetClient.prototype.processDelete = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Transfer ownership of schema permission set
         * @param id ID of the permission set to transfer
         * @param request The request containing user who should be the new owner.
         * @return OK
         */
        SchemaPermissionSetClient.prototype.transferOwnership = function (id, request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/schemaPermissionSets/{id}/ownership";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processTransferOwnership(_response);
            });
        };
        SchemaPermissionSetClient.prototype.processTransferOwnership = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Get permissions for the permission set
         * @param id ID of the permission set to view permissions of.
         * @return List of permissions
         */
        SchemaPermissionSetClient.prototype.getPermissions = function (id) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/schemaPermissionSets/{id}/permissions";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetPermissions(_response);
            });
        };
        SchemaPermissionSetClient.prototype.processGetPermissions = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Create multiple schema permission sets
         * @param request The request containing information needed to create new permission sets.
         * @return Bulk response with information about created permission sets
         */
        SchemaPermissionSetClient.prototype.createMany = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/schemaPermissionSets/many";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processCreateMany(_response);
            });
        };
        SchemaPermissionSetClient.prototype.processCreateMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Update multiple schema permission sets
         * @param request The request containing information needed to update the permission set.
         * @return Bulk response with information about updated permission sets
         */
        SchemaPermissionSetClient.prototype.updateMany = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/schemaPermissionSets/many";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processUpdateMany(_response);
            });
        };
        SchemaPermissionSetClient.prototype.processUpdateMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Delete multiple schema permission sets
         * @param request The request with permission set IDs to delete.
         * @return Bulk response with information about success or failure
         */
        SchemaPermissionSetClient.prototype.deleteMany = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/schemaPermissionSets/many/delete";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteMany(_response);
            });
        };
        SchemaPermissionSetClient.prototype.processDeleteMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Transfer ownership of multiple schema permission sets
         * @param request The request containing information on which permission set to transfer to which user.
         * @return OK
         */
        SchemaPermissionSetClient.prototype.transferOwnershipMany = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/schemaPermissionSets/many/ownership";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processTransferOwnershipMany(_response);
            });
        };
        SchemaPermissionSetClient.prototype.processTransferOwnershipMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Get permissions for multiple permission sets
         * @param ids (optional) IDs of the permission sets to view permissions of.
         * @return List of permissions
         */
        SchemaPermissionSetClient.prototype.getPermissionsMany = function (ids) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/schemaPermissionSets/many/permissions?";
            if (ids === null)
                throw new Error("The parameter 'ids' cannot be null.");
            else if (ids !== undefined)
                ids && ids.forEach(function (item) { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetPermissionsMany(_response);
            });
        };
        SchemaPermissionSetClient.prototype.processGetPermissionsMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Search schema permission sets
         * @param request The permission set search request.
         * @return Permission set search result
         */
        SchemaPermissionSetClient.prototype.search = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/schemaPermissionSets/search";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processSearch(_response);
            });
        };
        SchemaPermissionSetClient.prototype.processSearch = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return SchemaPermissionSetClient;
    }(PictureparkClientBase));
    exports.SchemaPermissionSetClient = SchemaPermissionSetClient;
    var SchemaTransferClient = /** @class */ (function (_super) {
        __extends(SchemaTransferClient, _super);
        function SchemaTransferClient(configuration, baseUrl, http) {
            var _this = _super.call(this, configuration) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = _this.getBaseUrl("", baseUrl);
            return _this;
        }
        /**
         * Import schemas
         * @param schemaImportRequest The schema import request.
         * @return Transfer
         */
        SchemaTransferClient.prototype.import = function (schemaImportRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/schematransfers/import";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(schemaImportRequest);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processImport(_response);
            });
        };
        SchemaTransferClient.prototype.processImport = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return SchemaTransferClient;
    }(PictureparkClientBase));
    exports.SchemaTransferClient = SchemaTransferClient;
    var ShareClient = /** @class */ (function (_super) {
        __extends(ShareClient, _super);
        function ShareClient(configuration, baseUrl, http) {
            var _this = _super.call(this, configuration) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = _this.getBaseUrl("", baseUrl);
            return _this;
        }
        /**
         * Get
         * @param id Share Id (not token, use [GetShareJson](#operation/Share_GetShareJson) to get share by token)
         * @return Share detail
         */
        ShareClient.prototype.get = function (id) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/shares/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGet(_response);
            });
        };
        ShareClient.prototype.processGet = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Update
         * @param id The share id.
         * @param updateRequest The share update request.
         * @return Share detail
         */
        ShareClient.prototype.update = function (id, updateRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/shares/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(updateRequest);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processUpdate(_response);
            });
        };
        ShareClient.prototype.processUpdate = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Search
         * @param request Search request
         * @return Share search result
         */
        ShareClient.prototype.search = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/shares/search";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processSearch(_response);
            });
        };
        ShareClient.prototype.processSearch = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Aggregate
         * @param request Aggregation request
         * @return Share aggregation result
         */
        ShareClient.prototype.aggregate = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/shares/aggregate";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processAggregate(_response);
            });
        };
        ShareClient.prototype.processAggregate = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Create
         * @param request Polymorphic create contract. Use either ShareBasicCreateRequest or ShareEmbedCreateRequest
         * @return Create result
         */
        ShareClient.prototype.create = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/shares";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processCreate(_response);
            });
        };
        ShareClient.prototype.processCreate = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 403) {
                return response.text().then(function (_responseText) {
                    var result403 = null;
                    result403 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result403);
                });
            }
            else if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Delete multiple shares
         * @param deleteManyRequest A delete many request containing the ids of the shares to delete.
         * @return BusinessProcess
         */
        ShareClient.prototype.deleteMany = function (deleteManyRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/shares/many/delete";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(deleteManyRequest);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteMany(_response);
            });
        };
        ShareClient.prototype.processDeleteMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Get share json
         * @param token Share token
         * @return ShareDetail
         */
        ShareClient.prototype.getShareJson = function (token) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/shares/json/{token}";
            if (token === undefined || token === null)
                throw new Error("The parameter 'token' must be defined.");
            url_ = url_.replace("{token}", encodeURIComponent("" + token));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetShareJson(_response);
            });
        };
        ShareClient.prototype.processGetShareJson = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Download shared outputs
         * @param token Share token
         * @param width (optional) Optional width in pixels to resize image
         * @param height (optional) Optional height in pixels to resize image
         * @param range (optional) The range of bytes to download (http range header): bytes={from}-{to} (e.g. bytes=0-100000)
         * @return HttpResponseMessage
         */
        ShareClient.prototype.download = function (token, width, height, range) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/shares/d/{token}?";
            if (token === undefined || token === null)
                throw new Error("The parameter 'token' must be defined.");
            url_ = url_.replace("{token}", encodeURIComponent("" + token));
            if (width !== undefined)
                url_ += "width=" + encodeURIComponent("" + width) + "&";
            if (height !== undefined)
                url_ += "height=" + encodeURIComponent("" + height) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "range": range !== undefined && range !== null ? "" + range : "",
                    "Accept": "application/octet-stream"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDownload(_response);
            });
        };
        ShareClient.prototype.processDownload = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200 || status === 206) {
                var contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
                var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                var fileName_4 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
                return response.blob().then(function (blob) { return { fileName: fileName_4, data: blob, status: status, headers: _headers }; });
            }
            else if (status === 206) {
                var contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
                var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                var fileName_5 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
                return response.blob().then(function (blob) { return { fileName: fileName_5, data: blob, status: status, headers: _headers }; });
            }
            else if (status === 412) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Download shared outputs
         * @param token Share token
         * @param contentId The content id
         * @param width (optional) Optional width in pixels to resize image
         * @param height (optional) Optional height in pixels to resize image
         * @param range (optional) The range of bytes to download (http range header): bytes={from}-{to} (e.g. bytes=0-100000)
         * @return HttpResponseMessage
         */
        ShareClient.prototype.downloadWithContentId = function (token, contentId, width, height, range) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/shares/d/{token}/{contentId}?";
            if (token === undefined || token === null)
                throw new Error("The parameter 'token' must be defined.");
            url_ = url_.replace("{token}", encodeURIComponent("" + token));
            if (contentId === undefined || contentId === null)
                throw new Error("The parameter 'contentId' must be defined.");
            url_ = url_.replace("{contentId}", encodeURIComponent("" + contentId));
            if (width !== undefined)
                url_ += "width=" + encodeURIComponent("" + width) + "&";
            if (height !== undefined)
                url_ += "height=" + encodeURIComponent("" + height) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "range": range !== undefined && range !== null ? "" + range : "",
                    "Accept": "application/octet-stream"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDownloadWithContentId(_response);
            });
        };
        ShareClient.prototype.processDownloadWithContentId = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200 || status === 206) {
                var contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
                var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                var fileName_6 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
                return response.blob().then(function (blob) { return { fileName: fileName_6, data: blob, status: status, headers: _headers }; });
            }
            else if (status === 206) {
                var contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
                var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                var fileName_7 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
                return response.blob().then(function (blob) { return { fileName: fileName_7, data: blob, status: status, headers: _headers }; });
            }
            else if (status === 412) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Download shared outputs
         * @param token Share token
         * @param contentId The content id
         * @param outputFormatId The output format id+
         * @param width (optional) Optional width in pixels to resize image
         * @param height (optional) Optional height in pixels to resize image
         * @param range (optional) The range of bytes to download (http range header): bytes={from}-{to} (e.g. bytes=0-100000)
         * @return HttpResponseMessage
         */
        ShareClient.prototype.downloadWithOutputFormatId = function (token, contentId, outputFormatId, width, height, range) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/shares/d/{token}/{contentId}/{outputFormatId}?";
            if (token === undefined || token === null)
                throw new Error("The parameter 'token' must be defined.");
            url_ = url_.replace("{token}", encodeURIComponent("" + token));
            if (contentId === undefined || contentId === null)
                throw new Error("The parameter 'contentId' must be defined.");
            url_ = url_.replace("{contentId}", encodeURIComponent("" + contentId));
            if (outputFormatId === undefined || outputFormatId === null)
                throw new Error("The parameter 'outputFormatId' must be defined.");
            url_ = url_.replace("{outputFormatId}", encodeURIComponent("" + outputFormatId));
            if (width !== undefined)
                url_ += "width=" + encodeURIComponent("" + width) + "&";
            if (height !== undefined)
                url_ += "height=" + encodeURIComponent("" + height) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "range": range !== undefined && range !== null ? "" + range : "",
                    "Accept": "application/octet-stream"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDownloadWithOutputFormatId(_response);
            });
        };
        ShareClient.prototype.processDownloadWithOutputFormatId = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200 || status === 206) {
                var contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
                var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                var fileName_8 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
                return response.blob().then(function (blob) { return { fileName: fileName_8, data: blob, status: status, headers: _headers }; });
            }
            else if (status === 206) {
                var contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
                var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                var fileName_9 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
                return response.blob().then(function (blob) { return { fileName: fileName_9, data: blob, status: status, headers: _headers }; });
            }
            else if (status === 412) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return ShareClient;
    }(PictureparkClientBase));
    exports.ShareClient = ShareClient;
    var TransferClient = /** @class */ (function (_super) {
        __extends(TransferClient, _super);
        function TransferClient(configuration, baseUrl, http) {
            var _this = _super.call(this, configuration) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = _this.getBaseUrl("", baseUrl);
            return _this;
        }
        /**
         * Get transfer details
         * @param transferId ID of transfer.
         * @return TransferDetail
         */
        TransferClient.prototype.get = function (transferId) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/transfers/{transferId}";
            if (transferId === undefined || transferId === null)
                throw new Error("The parameter 'transferId' must be defined.");
            url_ = url_.replace("{transferId}", encodeURIComponent("" + transferId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGet(_response);
            });
        };
        TransferClient.prototype.processGet = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Delete transfer
         * @param transferId ID of transfer.
         * @return OK
         */
        TransferClient.prototype.delete = function (transferId) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/transfers/{transferId}";
            if (transferId === undefined || transferId === null)
                throw new Error("The parameter 'transferId' must be defined.");
            url_ = url_.replace("{transferId}", encodeURIComponent("" + transferId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: {}
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDelete(_response);
            });
        };
        TransferClient.prototype.processDelete = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Search
         * @param request The transfer search request
         * @return TransferSearchResult
         */
        TransferClient.prototype.search = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/transfers/search";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processSearch(_response);
            });
        };
        TransferClient.prototype.processSearch = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Cancel transfer
         * @param transferId ID of transfer.
         * @return OK
         */
        TransferClient.prototype.cancelTransfer = function (transferId) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/transfers/{transferId}/cancel";
            if (transferId === undefined || transferId === null)
                throw new Error("The parameter 'transferId' must be defined.");
            url_ = url_.replace("{transferId}", encodeURIComponent("" + transferId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "POST",
                headers: {}
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processCancelTransfer(_response);
            });
        };
        TransferClient.prototype.processCancelTransfer = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Create transfer
         * @param request The create transfer request
         * @return Transfer
         */
        TransferClient.prototype.create = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/transfers";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processCreate(_response);
            });
        };
        TransferClient.prototype.processCreate = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Get file
         * @param fileTransferId ID of filetransfer.
         * @return FileTransferDetail
         */
        TransferClient.prototype.getFile = function (fileTransferId) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/transfers/files/{fileTransferId}";
            if (fileTransferId === undefined || fileTransferId === null)
                throw new Error("The parameter 'fileTransferId' must be defined.");
            url_ = url_.replace("{fileTransferId}", encodeURIComponent("" + fileTransferId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetFile(_response);
            });
        };
        TransferClient.prototype.processGetFile = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Search for files
         * @param request The filetransfer search request
         * @return FileTransferSearchResult
         */
        TransferClient.prototype.searchFiles = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/transfers/files/search";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processSearchFiles(_response);
            });
        };
        TransferClient.prototype.processSearchFiles = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Get blacklist
         * @return Blacklist
         */
        TransferClient.prototype.getBlacklist = function () {
            var _this = this;
            var url_ = this.baseUrl + "/v1/transfers/files/blacklist";
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetBlacklist(_response);
            });
        };
        TransferClient.prototype.processGetBlacklist = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Delete files
         * @param request The filetransfer delete request
         */
        TransferClient.prototype.deleteFiles = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/transfers/files/delete";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteFiles(_response);
            });
        };
        TransferClient.prototype.processDeleteFiles = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Import transfer
         * @param transferId ID of transfer.
         * @param request The ImportTransfer request.
         * @return Transfer
         */
        TransferClient.prototype.importTransfer = function (transferId, request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/transfers/{transferId}/import";
            if (transferId === undefined || transferId === null)
                throw new Error("The parameter 'transferId' must be defined.");
            url_ = url_.replace("{transferId}", encodeURIComponent("" + transferId));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processImportTransfer(_response);
            });
        };
        TransferClient.prototype.processImportTransfer = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Import transfer partially
         * @param transferId ID of transfer.
         * @param request The ImportTransferPartial request.
         * @return Transfer
         */
        TransferClient.prototype.partialImport = function (transferId, request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/transfers/{transferId}/partialImport";
            if (transferId === undefined || transferId === null)
                throw new Error("The parameter 'transferId' must be defined.");
            url_ = url_.replace("{transferId}", encodeURIComponent("" + transferId));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processPartialImport(_response);
            });
        };
        TransferClient.prototype.processPartialImport = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Upload file
         * @param relativePath Relative path of the uploading file.
         * @param chunkNumber Current chunk number. Starts at 1.
         * @param currentChunkSize Size in bytes of the current chunk.
         * @param totalSize Total size in bytes of the uploading file.
         * @param totalChunks Total chunks of the uploading file.
         * @param transferId ID of transfer.
         * @param identifier Identifier of file.
         * @param formFile (optional) Gets or sets the form file.
         * @return OK
         */
        TransferClient.prototype.uploadFile = function (relativePath, chunkNumber, currentChunkSize, totalSize, totalChunks, transferId, identifier, formFile) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/transfers/{transferId}/files/{identifier}/upload?";
            if (transferId === undefined || transferId === null)
                throw new Error("The parameter 'transferId' must be defined.");
            url_ = url_.replace("{transferId}", encodeURIComponent("" + transferId));
            if (identifier === undefined || identifier === null)
                throw new Error("The parameter 'identifier' must be defined.");
            url_ = url_.replace("{identifier}", encodeURIComponent("" + identifier));
            if (relativePath === undefined)
                throw new Error("The parameter 'relativePath' must be defined.");
            else
                url_ += "relativePath=" + encodeURIComponent("" + relativePath) + "&";
            if (chunkNumber === undefined || chunkNumber === null)
                throw new Error("The parameter 'chunkNumber' must be defined and cannot be null.");
            else
                url_ += "chunkNumber=" + encodeURIComponent("" + chunkNumber) + "&";
            if (currentChunkSize === undefined || currentChunkSize === null)
                throw new Error("The parameter 'currentChunkSize' must be defined and cannot be null.");
            else
                url_ += "currentChunkSize=" + encodeURIComponent("" + currentChunkSize) + "&";
            if (totalSize === undefined || totalSize === null)
                throw new Error("The parameter 'totalSize' must be defined and cannot be null.");
            else
                url_ += "totalSize=" + encodeURIComponent("" + totalSize) + "&";
            if (totalChunks === undefined || totalChunks === null)
                throw new Error("The parameter 'totalChunks' must be defined and cannot be null.");
            else
                url_ += "totalChunks=" + encodeURIComponent("" + totalChunks) + "&";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = new FormData();
            if (formFile !== null && formFile !== undefined)
                content_.append("formFile", formFile.data, formFile.fileName ? formFile.fileName : "formFile");
            var options_ = {
                body: content_,
                method: "POST",
                headers: {}
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processUploadFile(_response);
            });
        };
        TransferClient.prototype.processUploadFile = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return TransferClient;
    }(PictureparkClientBase));
    exports.TransferClient = TransferClient;
    var UserClient = /** @class */ (function (_super) {
        __extends(UserClient, _super);
        function UserClient(configuration, baseUrl, http) {
            var _this = _super.call(this, configuration) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = _this.getBaseUrl("", baseUrl);
            return _this;
        }
        /**
         * Create user
         * @param request Requested user information.
         * @return Newly created user
         */
        UserClient.prototype.create = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/users";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processCreate(_response);
            });
        };
        UserClient.prototype.processCreate = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Get user
         * @param userId User ID to search for.
         * @return Requested user details
         */
        UserClient.prototype.get = function (userId) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/users/{userId}";
            if (userId === undefined || userId === null)
                throw new Error("The parameter 'userId' must be defined.");
            url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGet(_response);
            });
        };
        UserClient.prototype.processGet = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Update user
         * @param userId User ID to action on.
         * @param request New user information.
         * @return User details after the update of the user
         */
        UserClient.prototype.update = function (userId, request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/users/{userId}";
            if (userId === undefined || userId === null)
                throw new Error("The parameter 'userId' must be defined.");
            url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processUpdate(_response);
            });
        };
        UserClient.prototype.processUpdate = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Search users
         * @param searchRequest User search request.
         * @return Result of the user search
         */
        UserClient.prototype.search = function (searchRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/users/search";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(searchRequest);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processSearch(_response);
            });
        };
        UserClient.prototype.processSearch = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Get user by owner token
         * @param tokenId ID of the owner token.
         * @return User details of the user referenced by the owner token
         */
        UserClient.prototype.getByOwnerToken = function (tokenId) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/users/owner/{tokenId}";
            if (tokenId === undefined || tokenId === null)
                throw new Error("The parameter 'tokenId' must be defined.");
            url_ = url_.replace("{tokenId}", encodeURIComponent("" + tokenId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetByOwnerToken(_response);
            });
        };
        UserClient.prototype.processGetByOwnerToken = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Get multiple users
         * @param ids User IDs.
         * @return Details of all the users who were found
         */
        UserClient.prototype.getMany = function (ids) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/users/many?";
            if (ids === undefined)
                throw new Error("The parameter 'ids' must be defined.");
            else
                ids && ids.forEach(function (item) { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetMany(_response);
            });
        };
        UserClient.prototype.processGetMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Aggregate users
         * @param request User aggregation request.
         * @return Aggregation based on the request
         */
        UserClient.prototype.aggregate = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/users/aggregate";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processAggregate(_response);
            });
        };
        UserClient.prototype.processAggregate = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Lock / unlock user
         * @param userId User ID to action on.
         * @param request Request detailing if the user should be locked or unlocked.
         * @return OK
         */
        UserClient.prototype.lock = function (userId, request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/users/{userId}/lock";
            if (userId === undefined || userId === null)
                throw new Error("The parameter 'userId' must be defined.");
            url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processLock(_response);
            });
        };
        UserClient.prototype.processLock = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Change user's review state
         * @param userId User ID to action on.
         * @param request Request detailing if the user should be set as _reviewed_ or _to be reviewed_.
         * @return OK
         */
        UserClient.prototype.review = function (userId, request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/users/{userId}/review";
            if (userId === undefined || userId === null)
                throw new Error("The parameter 'userId' must be defined.");
            url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processReview(_response);
            });
        };
        UserClient.prototype.processReview = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Invite user
         * @param userId User ID to action on.
         * @return OK
         */
        UserClient.prototype.invite = function (userId) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/users/{userId}/invite";
            if (userId === undefined || userId === null)
                throw new Error("The parameter 'userId' must be defined.");
            url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "POST",
                headers: {}
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processInvite(_response);
            });
        };
        UserClient.prototype.processInvite = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Reinvite user
         * @param userId User ID to action on.
         * @return OK
         */
        UserClient.prototype.reinvite = function (userId) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/users/{userId}/reinvite";
            if (userId === undefined || userId === null)
                throw new Error("The parameter 'userId' must be defined.");
            url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "POST",
                headers: {}
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processReinvite(_response);
            });
        };
        UserClient.prototype.processReinvite = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Delete user
         * @param userId User ID to action on.
         * @param request Request with details regarding the deletion.
         * @return OK
         */
        UserClient.prototype.delete = function (userId, request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/users/{userId}/delete";
            if (userId === undefined || userId === null)
                throw new Error("The parameter 'userId' must be defined.");
            url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDelete(_response);
            });
        };
        UserClient.prototype.processDelete = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Cancels a user triggered deletion request and returns user to _Reviewed_ state.
         * @param userId User ID to action on.
         * @return OK
         */
        UserClient.prototype.cancelDeletionRequest = function (userId) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/users/{userId}/cancelDeletionRequest";
            if (userId === undefined || userId === null)
                throw new Error("The parameter 'userId' must be defined.");
            url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "POST",
                headers: {}
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processCancelDeletionRequest(_response);
            });
        };
        UserClient.prototype.processCancelDeletionRequest = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Restore user
         * @param userId User ID to action on.
         * @return OK
         */
        UserClient.prototype.restore = function (userId) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/users/{userId}/restore";
            if (userId === undefined || userId === null)
                throw new Error("The parameter 'userId' must be defined.");
            url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "POST",
                headers: {}
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processRestore(_response);
            });
        };
        UserClient.prototype.processRestore = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return UserClient;
    }(PictureparkClientBase));
    exports.UserClient = UserClient;
    var UserRoleClient = /** @class */ (function (_super) {
        __extends(UserRoleClient, _super);
        function UserRoleClient(configuration, baseUrl, http) {
            var _this = _super.call(this, configuration) || this;
            _this.jsonParseReviver = undefined;
            _this.http = http ? http : window;
            _this.baseUrl = _this.getBaseUrl("", baseUrl);
            return _this;
        }
        /**
         * Get multiple user roles
         * @param ids User role IDs to get information about.
         * @return List of user roles
         */
        UserRoleClient.prototype.getMany = function (ids) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/userRoles?";
            if (ids === undefined)
                throw new Error("The parameter 'ids' must be defined.");
            else
                ids && ids.forEach(function (item) { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGetMany(_response);
            });
        };
        UserRoleClient.prototype.processGetMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Create user role
         * @param request User role creation request.
         * @return Newly created user role
         */
        UserRoleClient.prototype.create = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/userRoles";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processCreate(_response);
            });
        };
        UserRoleClient.prototype.processCreate = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Get user role
         * @param userRoleId The user role ID
         * @return User role or null if not found
         */
        UserRoleClient.prototype.get = function (userRoleId) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/userRoles/{userRoleId}";
            if (userRoleId === undefined || userRoleId === null)
                throw new Error("The parameter 'userRoleId' must be defined.");
            url_ = url_.replace("{userRoleId}", encodeURIComponent("" + userRoleId));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "GET",
                headers: {
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processGet(_response);
            });
        };
        UserRoleClient.prototype.processGet = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Search user roles
         * @param searchRequest User role search request.
         * @return Result of the user role search
         */
        UserRoleClient.prototype.search = function (searchRequest) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/userRoles/search";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(searchRequest);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processSearch(_response);
            });
        };
        UserRoleClient.prototype.processSearch = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Update user roles
         * @param id ID of the user role to update.
         * @param request User role update request.
         * @return Updated user role
         */
        UserRoleClient.prototype.update = function (id, request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/userRoles/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processUpdate(_response);
            });
        };
        UserRoleClient.prototype.processUpdate = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Delete user role
         * @param id ID of user role to delete
         * @return OK
         */
        UserRoleClient.prototype.delete = function (id) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/userRoles/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            var options_ = {
                method: "DELETE",
                headers: {}
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDelete(_response);
            });
        };
        UserRoleClient.prototype.processDelete = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    return;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Create multiple user roles
         * @param request Multiple user role creation request.
         * @return Bulk response
         */
        UserRoleClient.prototype.createMany = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/userRoles/many";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processCreateMany(_response);
            });
        };
        UserRoleClient.prototype.processCreateMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Update multiple user roles
         * @param request Multiple user role update request.
         * @return Bulk response
         */
        UserRoleClient.prototype.updateMany = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/userRoles/many";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processUpdateMany(_response);
            });
        };
        UserRoleClient.prototype.processUpdateMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        /**
         * Delete multiple user roles
         * @param request Multiple user role deletion request.
         * @return Bulk request
         */
        UserRoleClient.prototype.deleteMany = function (request) {
            var _this = this;
            var url_ = this.baseUrl + "/v1/userRoles/many/delete";
            url_ = url_.replace(/[?&]$/, "");
            var content_ = JSON.stringify(request);
            var options_ = {
                body: content_,
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            };
            return this.transformOptions(options_).then(function (transformedOptions_) {
                return _this.http.fetch(url_, transformedOptions_);
            }).then(function (_response) {
                return _this.processDeleteMany(_response);
            });
        };
        UserRoleClient.prototype.processDeleteMany = function (response) {
            var _this = this;
            var status = response.status;
            var _headers = {};
            if (response.headers && response.headers.forEach) {
                response.headers.forEach(function (v, k) { return _headers[k] = v; });
            }
            ;
            if (status === 200) {
                return response.text().then(function (_responseText) {
                    var result200 = null;
                    result200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return result200;
                });
            }
            else if (status === 500) {
                return response.text().then(function (_responseText) {
                    var result500 = null;
                    result500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result500);
                });
            }
            else if (status === 401) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 405) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status === 404) {
                return response.text().then(function (_responseText) {
                    var result404 = null;
                    result404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result404);
                });
            }
            else if (status === 409) {
                return response.text().then(function (_responseText) {
                    var result409 = null;
                    result409 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result409);
                });
            }
            else if (status === 400) {
                return response.text().then(function (_responseText) {
                    var result400 = null;
                    result400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                    return throwException("A server error occurred.", status, _responseText, _headers, result400);
                });
            }
            else if (status === 429) {
                return response.text().then(function (_responseText) {
                    return throwException("A server error occurred.", status, _responseText, _headers);
                });
            }
            else if (status !== 200 && status !== 204) {
                return response.text().then(function (_responseText) {
                    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve(null);
        };
        return UserRoleClient;
    }(PictureparkClientBase));
    exports.UserRoleClient = UserRoleClient;
    /** Scope of the business process */
    var BusinessProcessScope;
    (function (BusinessProcessScope) {
        BusinessProcessScope[BusinessProcessScope["System"] = "System"] = "System";
        BusinessProcessScope[BusinessProcessScope["User"] = "User"] = "User";
    })(BusinessProcessScope = exports.BusinessProcessScope || (exports.BusinessProcessScope = {}));
    /** Life cycle of the business process */
    var BusinessProcessLifeCycle;
    (function (BusinessProcessLifeCycle) {
        BusinessProcessLifeCycle[BusinessProcessLifeCycle["Draft"] = "Draft"] = "Draft";
        BusinessProcessLifeCycle[BusinessProcessLifeCycle["InProgress"] = "InProgress"] = "InProgress";
        BusinessProcessLifeCycle[BusinessProcessLifeCycle["Succeeded"] = "Succeeded"] = "Succeeded";
        BusinessProcessLifeCycle[BusinessProcessLifeCycle["Cancelled"] = "Cancelled"] = "Cancelled";
        BusinessProcessLifeCycle[BusinessProcessLifeCycle["CancellationInProgress"] = "CancellationInProgress"] = "CancellationInProgress";
        BusinessProcessLifeCycle[BusinessProcessLifeCycle["Failed"] = "Failed"] = "Failed";
        BusinessProcessLifeCycle[BusinessProcessLifeCycle["SucceededWithErrors"] = "SucceededWithErrors"] = "SucceededWithErrors";
    })(BusinessProcessLifeCycle = exports.BusinessProcessLifeCycle || (exports.BusinessProcessLifeCycle = {}));
    var TraceLevel;
    (function (TraceLevel) {
        TraceLevel[TraceLevel["Critical"] = "Critical"] = "Critical";
        TraceLevel[TraceLevel["Error"] = "Error"] = "Error";
        TraceLevel[TraceLevel["Warning"] = "Warning"] = "Warning";
        TraceLevel[TraceLevel["Information"] = "Information"] = "Information";
        TraceLevel[TraceLevel["Verbose"] = "Verbose"] = "Verbose";
    })(TraceLevel = exports.TraceLevel || (exports.TraceLevel = {}));
    var LeaseResourceType;
    (function (LeaseResourceType) {
        LeaseResourceType[LeaseResourceType["SchemaEditing"] = "SchemaEditing"] = "SchemaEditing";
    })(LeaseResourceType = exports.LeaseResourceType || (exports.LeaseResourceType = {}));
    var UserRight;
    (function (UserRight) {
        UserRight[UserRight["ManageContent"] = "ManageContent"] = "ManageContent";
        UserRight[UserRight["ManageSharings"] = "ManageSharings"] = "ManageSharings";
        UserRight[UserRight["ManageTransfer"] = "ManageTransfer"] = "ManageTransfer";
        UserRight[UserRight["ManageChannels"] = "ManageChannels"] = "ManageChannels";
        UserRight[UserRight["ManageSchemas"] = "ManageSchemas"] = "ManageSchemas";
        UserRight[UserRight["ManageUsers"] = "ManageUsers"] = "ManageUsers";
        UserRight[UserRight["ManageUserRoles"] = "ManageUserRoles"] = "ManageUserRoles";
        UserRight[UserRight["ManagePermissions"] = "ManagePermissions"] = "ManagePermissions";
        UserRight[UserRight["ManageSearchIndexes"] = "ManageSearchIndexes"] = "ManageSearchIndexes";
        UserRight[UserRight["ManageCollections"] = "ManageCollections"] = "ManageCollections";
        UserRight[UserRight["ManageListItems"] = "ManageListItems"] = "ManageListItems";
        UserRight[UserRight["ManageServiceProviders"] = "ManageServiceProviders"] = "ManageServiceProviders";
        UserRight[UserRight["ManageEmbeds"] = "ManageEmbeds"] = "ManageEmbeds";
        UserRight[UserRight["ManageTemplates"] = "ManageTemplates"] = "ManageTemplates";
        UserRight[UserRight["ManageTermsOfService"] = "ManageTermsOfService"] = "ManageTermsOfService";
        UserRight[UserRight["ManageLiveStream"] = "ManageLiveStream"] = "ManageLiveStream";
        UserRight[UserRight["ManageDocumentHistory"] = "ManageDocumentHistory"] = "ManageDocumentHistory";
        UserRight[UserRight["ManageAllShares"] = "ManageAllShares"] = "ManageAllShares";
        UserRight[UserRight["ManageOutputFormats"] = "ManageOutputFormats"] = "ManageOutputFormats";
    })(UserRight = exports.UserRight || (exports.UserRight = {}));
    /** Content rights */
    var ContentRight;
    (function (ContentRight) {
        ContentRight[ContentRight["View"] = "View"] = "View";
        ContentRight[ContentRight["AccessOriginal"] = "AccessOriginal"] = "AccessOriginal";
        ContentRight[ContentRight["EditMetadata"] = "EditMetadata"] = "EditMetadata";
        ContentRight[ContentRight["EditContent"] = "EditContent"] = "EditContent";
        ContentRight[ContentRight["ManagePermissions"] = "ManagePermissions"] = "ManagePermissions";
        ContentRight[ContentRight["Delete"] = "Delete"] = "Delete";
    })(ContentRight = exports.ContentRight || (exports.ContentRight = {}));
    /** Metadata rights */
    var MetadataRight;
    (function (MetadataRight) {
        MetadataRight[MetadataRight["View"] = "View"] = "View";
        MetadataRight[MetadataRight["ManageItems"] = "ManageItems"] = "ManageItems";
        MetadataRight[MetadataRight["ManageSchema"] = "ManageSchema"] = "ManageSchema";
    })(MetadataRight = exports.MetadataRight || (exports.MetadataRight = {}));
    /** Type of the transfer */
    var TransferType;
    (function (TransferType) {
        TransferType[TransferType["FileUpload"] = "FileUpload"] = "FileUpload";
        TransferType[TransferType["FileUploadAutoImport"] = "FileUploadAutoImport"] = "FileUploadAutoImport";
        TransferType[TransferType["WebDownload"] = "WebDownload"] = "WebDownload";
        TransferType[TransferType["SchemaImport"] = "SchemaImport"] = "SchemaImport";
    })(TransferType = exports.TransferType || (exports.TransferType = {}));
    /** Type of the schema */
    var SchemaType;
    (function (SchemaType) {
        SchemaType[SchemaType["Content"] = "Content"] = "Content";
        SchemaType[SchemaType["Layer"] = "Layer"] = "Layer";
        SchemaType[SchemaType["List"] = "List"] = "List";
        SchemaType[SchemaType["Struct"] = "Struct"] = "Struct";
    })(SchemaType = exports.SchemaType || (exports.SchemaType = {}));
    /** The display pattern type */
    var DisplayPatternType;
    (function (DisplayPatternType) {
        DisplayPatternType[DisplayPatternType["Thumbnail"] = "Thumbnail"] = "Thumbnail";
        DisplayPatternType[DisplayPatternType["List"] = "List"] = "List";
        DisplayPatternType[DisplayPatternType["Detail"] = "Detail"] = "Detail";
        DisplayPatternType[DisplayPatternType["Name"] = "Name"] = "Name";
    })(DisplayPatternType = exports.DisplayPatternType || (exports.DisplayPatternType = {}));
    var Analyzer;
    (function (Analyzer) {
        Analyzer[Analyzer["None"] = "None"] = "None";
        Analyzer[Analyzer["Simple"] = "Simple"] = "Simple";
        Analyzer[Analyzer["Language"] = "Language"] = "Language";
        Analyzer[Analyzer["PathHierarchy"] = "PathHierarchy"] = "PathHierarchy";
        Analyzer[Analyzer["EdgeNGram"] = "EdgeNGram"] = "EdgeNGram";
        Analyzer[Analyzer["NGram"] = "NGram"] = "NGram";
    })(Analyzer = exports.Analyzer || (exports.Analyzer = {}));
    /** Content types */
    var ContentType;
    (function (ContentType) {
        ContentType[ContentType["Unknown"] = "Unknown"] = "Unknown";
        ContentType[ContentType["Bitmap"] = "Bitmap"] = "Bitmap";
        ContentType[ContentType["VectorGraphic"] = "VectorGraphic"] = "VectorGraphic";
        ContentType[ContentType["RawImage"] = "RawImage"] = "RawImage";
        ContentType[ContentType["InterchangeDocument"] = "InterchangeDocument"] = "InterchangeDocument";
        ContentType[ContentType["WordProcessingDocument"] = "WordProcessingDocument"] = "WordProcessingDocument";
        ContentType[ContentType["TextDocument"] = "TextDocument"] = "TextDocument";
        ContentType[ContentType["DesktopPublishingDocument"] = "DesktopPublishingDocument"] = "DesktopPublishingDocument";
        ContentType[ContentType["Presentation"] = "Presentation"] = "Presentation";
        ContentType[ContentType["Spreadsheet"] = "Spreadsheet"] = "Spreadsheet";
        ContentType[ContentType["Archive"] = "Archive"] = "Archive";
        ContentType[ContentType["Audio"] = "Audio"] = "Audio";
        ContentType[ContentType["Video"] = "Video"] = "Video";
        ContentType[ContentType["Font"] = "Font"] = "Font";
        ContentType[ContentType["Multimedia"] = "Multimedia"] = "Multimedia";
        ContentType[ContentType["Application"] = "Application"] = "Application";
        ContentType[ContentType["SourceCode"] = "SourceCode"] = "SourceCode";
        ContentType[ContentType["Database"] = "Database"] = "Database";
        ContentType[ContentType["Cad"] = "Cad"] = "Cad";
        ContentType[ContentType["Model3d"] = "Model3d"] = "Model3d";
        ContentType[ContentType["ContentItem"] = "ContentItem"] = "ContentItem";
    })(ContentType = exports.ContentType || (exports.ContentType = {}));
    var EnvironmentProcessType;
    (function (EnvironmentProcessType) {
        EnvironmentProcessType[EnvironmentProcessType["AddMetadataLanguage"] = "AddMetadataLanguage"] = "AddMetadataLanguage";
        EnvironmentProcessType[EnvironmentProcessType["CustomerUpdate"] = "CustomerUpdate"] = "CustomerUpdate";
        EnvironmentProcessType[EnvironmentProcessType["EnvironmentUpdate"] = "EnvironmentUpdate"] = "EnvironmentUpdate";
        EnvironmentProcessType[EnvironmentProcessType["CustomerBoostValuesUpdate"] = "CustomerBoostValuesUpdate"] = "CustomerBoostValuesUpdate";
    })(EnvironmentProcessType = exports.EnvironmentProcessType || (exports.EnvironmentProcessType = {}));
    /** Search behaviors */
    var SearchBehavior;
    (function (SearchBehavior) {
        SearchBehavior[SearchBehavior["DropInvalidCharactersOnFailure"] = "DropInvalidCharactersOnFailure"] = "DropInvalidCharactersOnFailure";
        SearchBehavior[SearchBehavior["WildcardOnSingleTerm"] = "WildcardOnSingleTerm"] = "WildcardOnSingleTerm";
        SearchBehavior[SearchBehavior["SimplifiedSearch"] = "SimplifiedSearch"] = "SimplifiedSearch";
        SearchBehavior[SearchBehavior["WildcardOnEveryTerm"] = "WildcardOnEveryTerm"] = "WildcardOnEveryTerm";
        SearchBehavior[SearchBehavior["SimplifiedSearchOr"] = "SimplifiedSearchOr"] = "SimplifiedSearchOr";
    })(SearchBehavior = exports.SearchBehavior || (exports.SearchBehavior = {}));
    /** The sort direction */
    var SortDirection;
    (function (SortDirection) {
        SortDirection[SortDirection["Asc"] = "Asc"] = "Asc";
        SortDirection[SortDirection["Desc"] = "Desc"] = "Desc";
    })(SortDirection = exports.SortDirection || (exports.SortDirection = {}));
    var TermsRelationAggregatorDocumentType;
    (function (TermsRelationAggregatorDocumentType) {
        TermsRelationAggregatorDocumentType[TermsRelationAggregatorDocumentType["Content"] = "Content"] = "Content";
        TermsRelationAggregatorDocumentType[TermsRelationAggregatorDocumentType["ListItem"] = "ListItem"] = "ListItem";
        TermsRelationAggregatorDocumentType[TermsRelationAggregatorDocumentType["Schema"] = "Schema"] = "Schema";
        TermsRelationAggregatorDocumentType[TermsRelationAggregatorDocumentType["User"] = "User"] = "User";
        TermsRelationAggregatorDocumentType[TermsRelationAggregatorDocumentType["ContentPermissionSet"] = "ContentPermissionSet"] = "ContentPermissionSet";
        TermsRelationAggregatorDocumentType[TermsRelationAggregatorDocumentType["Owner"] = "Owner"] = "Owner";
    })(TermsRelationAggregatorDocumentType = exports.TermsRelationAggregatorDocumentType || (exports.TermsRelationAggregatorDocumentType = {}));
    var OutputRenderingState;
    (function (OutputRenderingState) {
        OutputRenderingState[OutputRenderingState["InProgress"] = "InProgress"] = "InProgress";
        OutputRenderingState[OutputRenderingState["Completed"] = "Completed"] = "Completed";
        OutputRenderingState[OutputRenderingState["Failed"] = "Failed"] = "Failed";
        OutputRenderingState[OutputRenderingState["Skipped"] = "Skipped"] = "Skipped";
        OutputRenderingState[OutputRenderingState["NoLicense"] = "NoLicense"] = "NoLicense";
        OutputRenderingState[OutputRenderingState["RerenderRequested"] = "RerenderRequested"] = "RerenderRequested";
    })(OutputRenderingState = exports.OutputRenderingState || (exports.OutputRenderingState = {}));
    /** Lifecycle */
    var LifeCycle;
    (function (LifeCycle) {
        LifeCycle[LifeCycle["Draft"] = "Draft"] = "Draft";
        LifeCycle[LifeCycle["Active"] = "Active"] = "Active";
        LifeCycle[LifeCycle["Inactive"] = "Inactive"] = "Inactive";
        LifeCycle[LifeCycle["Deleted"] = "Deleted"] = "Deleted";
    })(LifeCycle = exports.LifeCycle || (exports.LifeCycle = {}));
    var ContentResolveBehavior;
    (function (ContentResolveBehavior) {
        ContentResolveBehavior[ContentResolveBehavior["Content"] = "Content"] = "Content";
        ContentResolveBehavior[ContentResolveBehavior["LinkedListItems"] = "LinkedListItems"] = "LinkedListItems";
        ContentResolveBehavior[ContentResolveBehavior["Metadata"] = "Metadata"] = "Metadata";
        ContentResolveBehavior[ContentResolveBehavior["Outputs"] = "Outputs"] = "Outputs";
        ContentResolveBehavior[ContentResolveBehavior["InnerDisplayValueThumbnail"] = "InnerDisplayValueThumbnail"] = "InnerDisplayValueThumbnail";
        ContentResolveBehavior[ContentResolveBehavior["InnerDisplayValueList"] = "InnerDisplayValueList"] = "InnerDisplayValueList";
        ContentResolveBehavior[ContentResolveBehavior["InnerDisplayValueDetail"] = "InnerDisplayValueDetail"] = "InnerDisplayValueDetail";
        ContentResolveBehavior[ContentResolveBehavior["InnerDisplayValueName"] = "InnerDisplayValueName"] = "InnerDisplayValueName";
        ContentResolveBehavior[ContentResolveBehavior["Owner"] = "Owner"] = "Owner";
        ContentResolveBehavior[ContentResolveBehavior["Permissions"] = "Permissions"] = "Permissions";
        ContentResolveBehavior[ContentResolveBehavior["OuterDisplayValueThumbnail"] = "OuterDisplayValueThumbnail"] = "OuterDisplayValueThumbnail";
        ContentResolveBehavior[ContentResolveBehavior["OuterDisplayValueList"] = "OuterDisplayValueList"] = "OuterDisplayValueList";
        ContentResolveBehavior[ContentResolveBehavior["OuterDisplayValueDetail"] = "OuterDisplayValueDetail"] = "OuterDisplayValueDetail";
        ContentResolveBehavior[ContentResolveBehavior["OuterDisplayValueName"] = "OuterDisplayValueName"] = "OuterDisplayValueName";
    })(ContentResolveBehavior = exports.ContentResolveBehavior || (exports.ContentResolveBehavior = {}));
    var LifeCycleFilter;
    (function (LifeCycleFilter) {
        LifeCycleFilter[LifeCycleFilter["ActiveOnly"] = "ActiveOnly"] = "ActiveOnly";
        LifeCycleFilter[LifeCycleFilter["All"] = "All"] = "All";
        LifeCycleFilter[LifeCycleFilter["InactiveOnly"] = "InactiveOnly"] = "InactiveOnly";
        LifeCycleFilter[LifeCycleFilter["ActiveInactiveOnly"] = "ActiveInactiveOnly"] = "ActiveInactiveOnly";
    })(LifeCycleFilter = exports.LifeCycleFilter || (exports.LifeCycleFilter = {}));
    /** Filter items with broken or not broken dependencies */
    var BrokenDependenciesFilter;
    (function (BrokenDependenciesFilter) {
        BrokenDependenciesFilter[BrokenDependenciesFilter["All"] = "All"] = "All";
        BrokenDependenciesFilter[BrokenDependenciesFilter["NotBrokenOnly"] = "NotBrokenOnly"] = "NotBrokenOnly";
        BrokenDependenciesFilter[BrokenDependenciesFilter["BrokenOnly"] = "BrokenOnly"] = "BrokenOnly";
    })(BrokenDependenciesFilter = exports.BrokenDependenciesFilter || (exports.BrokenDependenciesFilter = {}));
    var ContentSearchType;
    (function (ContentSearchType) {
        ContentSearchType[ContentSearchType["Metadata"] = "Metadata"] = "Metadata";
        ContentSearchType[ContentSearchType["FullText"] = "FullText"] = "FullText";
        ContentSearchType[ContentSearchType["MetadataAndFullText"] = "MetadataAndFullText"] = "MetadataAndFullText";
    })(ContentSearchType = exports.ContentSearchType || (exports.ContentSearchType = {}));
    var ShareType;
    (function (ShareType) {
        ShareType[ShareType["Basic"] = "Basic"] = "Basic";
        ShareType[ShareType["Embed"] = "Embed"] = "Embed";
    })(ShareType = exports.ShareType || (exports.ShareType = {}));
    /** Values that represent thumbnail sizes. */
    var ThumbnailSize;
    (function (ThumbnailSize) {
        ThumbnailSize[ThumbnailSize["Small"] = "Small"] = "Small";
        ThumbnailSize[ThumbnailSize["Medium"] = "Medium"] = "Medium";
        ThumbnailSize[ThumbnailSize["Large"] = "Large"] = "Large";
    })(ThumbnailSize = exports.ThumbnailSize || (exports.ThumbnailSize = {}));
    /** Controls the update of metadata */
    var UpdateOption;
    (function (UpdateOption) {
        UpdateOption[UpdateOption["Merge"] = "Merge"] = "Merge";
        UpdateOption[UpdateOption["Replace"] = "Replace"] = "Replace";
    })(UpdateOption = exports.UpdateOption || (exports.UpdateOption = {}));
    /** Permission set rights */
    var PermissionSetRight;
    (function (PermissionSetRight) {
        PermissionSetRight[PermissionSetRight["Apply"] = "Apply"] = "Apply";
        PermissionSetRight[PermissionSetRight["Manage"] = "Manage"] = "Manage";
    })(PermissionSetRight = exports.PermissionSetRight || (exports.PermissionSetRight = {}));
    var DocumentChangeAction;
    (function (DocumentChangeAction) {
        DocumentChangeAction[DocumentChangeAction["Create"] = "Create"] = "Create";
        DocumentChangeAction[DocumentChangeAction["Update"] = "Update"] = "Update";
        DocumentChangeAction[DocumentChangeAction["Delete"] = "Delete"] = "Delete";
        DocumentChangeAction[DocumentChangeAction["Activate"] = "Activate"] = "Activate";
        DocumentChangeAction[DocumentChangeAction["Deactivate"] = "Deactivate"] = "Deactivate";
    })(DocumentChangeAction = exports.DocumentChangeAction || (exports.DocumentChangeAction = {}));
    var ListItemResolveBehavior;
    (function (ListItemResolveBehavior) {
        ListItemResolveBehavior[ListItemResolveBehavior["Content"] = "Content"] = "Content";
        ListItemResolveBehavior[ListItemResolveBehavior["LinkedListItems"] = "LinkedListItems"] = "LinkedListItems";
        ListItemResolveBehavior[ListItemResolveBehavior["InnerDisplayValueThumbnail"] = "InnerDisplayValueThumbnail"] = "InnerDisplayValueThumbnail";
        ListItemResolveBehavior[ListItemResolveBehavior["InnerDisplayValueList"] = "InnerDisplayValueList"] = "InnerDisplayValueList";
        ListItemResolveBehavior[ListItemResolveBehavior["InnerDisplayValueDetail"] = "InnerDisplayValueDetail"] = "InnerDisplayValueDetail";
        ListItemResolveBehavior[ListItemResolveBehavior["InnerDisplayValueName"] = "InnerDisplayValueName"] = "InnerDisplayValueName";
        ListItemResolveBehavior[ListItemResolveBehavior["OuterDisplayValueThumbnail"] = "OuterDisplayValueThumbnail"] = "OuterDisplayValueThumbnail";
        ListItemResolveBehavior[ListItemResolveBehavior["OuterDisplayValueList"] = "OuterDisplayValueList"] = "OuterDisplayValueList";
        ListItemResolveBehavior[ListItemResolveBehavior["OuterDisplayValueDetail"] = "OuterDisplayValueDetail"] = "OuterDisplayValueDetail";
        ListItemResolveBehavior[ListItemResolveBehavior["OuterDisplayValueName"] = "OuterDisplayValueName"] = "OuterDisplayValueName";
    })(ListItemResolveBehavior = exports.ListItemResolveBehavior || (exports.ListItemResolveBehavior = {}));
    /** Transfer states */
    var TransferState;
    (function (TransferState) {
        TransferState[TransferState["Draft"] = "Draft"] = "Draft";
        TransferState[TransferState["UploadInProgress"] = "UploadInProgress"] = "UploadInProgress";
        TransferState[TransferState["UploadCompleted"] = "UploadCompleted"] = "UploadCompleted";
        TransferState[TransferState["ImportInProgress"] = "ImportInProgress"] = "ImportInProgress";
        TransferState[TransferState["ImportCompleted"] = "ImportCompleted"] = "ImportCompleted";
        TransferState[TransferState["UploadCancelled"] = "UploadCancelled"] = "UploadCancelled";
        TransferState[TransferState["ImportCancelled"] = "ImportCancelled"] = "ImportCancelled";
        TransferState[TransferState["ImportFailed"] = "ImportFailed"] = "ImportFailed";
        TransferState[TransferState["Created"] = "Created"] = "Created";
        TransferState[TransferState["Deleted"] = "Deleted"] = "Deleted";
        TransferState[TransferState["TransferReady"] = "TransferReady"] = "TransferReady";
        TransferState[TransferState["FileDeleteInProgress"] = "FileDeleteInProgress"] = "FileDeleteInProgress";
        TransferState[TransferState["TransferCleanup"] = "TransferCleanup"] = "TransferCleanup";
        TransferState[TransferState["ImportCompletedWithErrors"] = "ImportCompletedWithErrors"] = "ImportCompletedWithErrors";
        TransferState[TransferState["UploadCompletedWithErrors"] = "UploadCompletedWithErrors"] = "UploadCompletedWithErrors";
        TransferState[TransferState["UploadCancellationInProgress"] = "UploadCancellationInProgress"] = "UploadCancellationInProgress";
    })(TransferState = exports.TransferState || (exports.TransferState = {}));
    var IndexState;
    (function (IndexState) {
        IndexState[IndexState["Draft"] = "Draft"] = "Draft";
        IndexState[IndexState["Create"] = "Create"] = "Create";
        IndexState[IndexState["Inactive"] = "Inactive"] = "Inactive";
        IndexState[IndexState["Active"] = "Active"] = "Active";
        IndexState[IndexState["Closed"] = "Closed"] = "Closed";
        IndexState[IndexState["ReindexInProgress"] = "ReindexInProgress"] = "ReindexInProgress";
        IndexState[IndexState["Cancelled"] = "Cancelled"] = "Cancelled";
    })(IndexState = exports.IndexState || (exports.IndexState = {}));
    var ContentDisposition;
    (function (ContentDisposition) {
        ContentDisposition[ContentDisposition["Attachment"] = "Attachment"] = "Attachment";
        ContentDisposition[ContentDisposition["Inline"] = "Inline"] = "Inline";
    })(ContentDisposition = exports.ContentDisposition || (exports.ContentDisposition = {}));
    /** User authorization state. */
    var AuthorizationState;
    (function (AuthorizationState) {
        AuthorizationState[AuthorizationState["Reviewed"] = "Reviewed"] = "Reviewed";
        AuthorizationState[AuthorizationState["ToBeReviewed"] = "ToBeReviewed"] = "ToBeReviewed";
        AuthorizationState[AuthorizationState["Invited"] = "Invited"] = "Invited";
        AuthorizationState[AuthorizationState["UserTriggeredDeactivation"] = "UserTriggeredDeactivation"] = "UserTriggeredDeactivation";
    })(AuthorizationState = exports.AuthorizationState || (exports.AuthorizationState = {}));
    var SearchIndexType;
    (function (SearchIndexType) {
        SearchIndexType[SearchIndexType["Content"] = "Content"] = "Content";
        SearchIndexType[SearchIndexType["ListItem"] = "ListItem"] = "ListItem";
    })(SearchIndexType = exports.SearchIndexType || (exports.SearchIndexType = {}));
    var ColorProfile;
    (function (ColorProfile) {
        ColorProfile[ColorProfile["AdobeRgb1998"] = "AdobeRgb1998"] = "AdobeRgb1998";
        ColorProfile[ColorProfile["AppleRgb"] = "AppleRgb"] = "AppleRgb";
        ColorProfile[ColorProfile["ColorMatchRgb"] = "ColorMatchRgb"] = "ColorMatchRgb";
        ColorProfile[ColorProfile["EciRgbV1"] = "EciRgbV1"] = "EciRgbV1";
        ColorProfile[ColorProfile["EciRgbV2"] = "EciRgbV2"] = "EciRgbV2";
        ColorProfile[ColorProfile["Srgb"] = "Srgb"] = "Srgb";
        ColorProfile[ColorProfile["SrgbColorSpaceProfile"] = "SrgbColorSpaceProfile"] = "SrgbColorSpaceProfile";
        ColorProfile[ColorProfile["EuropeIsoCoatedFogra27"] = "EuropeIsoCoatedFogra27"] = "EuropeIsoCoatedFogra27";
        ColorProfile[ColorProfile["EuroscaleCoated"] = "EuroscaleCoated"] = "EuroscaleCoated";
        ColorProfile[ColorProfile["EuroscaleUncoated"] = "EuroscaleUncoated"] = "EuroscaleUncoated";
        ColorProfile[ColorProfile["IsoCoated"] = "IsoCoated"] = "IsoCoated";
        ColorProfile[ColorProfile["IsoCoatedEciV2"] = "IsoCoatedEciV2"] = "IsoCoatedEciV2";
        ColorProfile[ColorProfile["JapanColor2001Coated"] = "JapanColor2001Coated"] = "JapanColor2001Coated";
        ColorProfile[ColorProfile["JapanColor2001Uncoated"] = "JapanColor2001Uncoated"] = "JapanColor2001Uncoated";
        ColorProfile[ColorProfile["JapanColor2002Newspaper"] = "JapanColor2002Newspaper"] = "JapanColor2002Newspaper";
        ColorProfile[ColorProfile["JapanWebCoated"] = "JapanWebCoated"] = "JapanWebCoated";
        ColorProfile[ColorProfile["UsSheetfedCoated"] = "UsSheetfedCoated"] = "UsSheetfedCoated";
        ColorProfile[ColorProfile["UsSheetfedUncoated"] = "UsSheetfedUncoated"] = "UsSheetfedUncoated";
        ColorProfile[ColorProfile["UsWebCoatedSwop"] = "UsWebCoatedSwop"] = "UsWebCoatedSwop";
        ColorProfile[ColorProfile["UsWebUncoated"] = "UsWebUncoated"] = "UsWebUncoated";
        ColorProfile[ColorProfile["IsoCoatedV2Grey1cBas"] = "IsoCoatedV2Grey1cBas"] = "IsoCoatedV2Grey1cBas";
        ColorProfile[ColorProfile["IsoCoated300EciV2"] = "IsoCoated300EciV2"] = "IsoCoated300EciV2";
        ColorProfile[ColorProfile["CoatedFogra27"] = "CoatedFogra27"] = "CoatedFogra27";
        ColorProfile[ColorProfile["CoatedFogra39"] = "CoatedFogra39"] = "CoatedFogra39";
        ColorProfile[ColorProfile["UncoatedFogra29"] = "UncoatedFogra29"] = "UncoatedFogra29";
        ColorProfile[ColorProfile["WebCoatedFogra28"] = "WebCoatedFogra28"] = "WebCoatedFogra28";
        ColorProfile[ColorProfile["WebCoatedSwop2006Grade3"] = "WebCoatedSwop2006Grade3"] = "WebCoatedSwop2006Grade3";
        ColorProfile[ColorProfile["WebCoatedSwop2006Grade5"] = "WebCoatedSwop2006Grade5"] = "WebCoatedSwop2006Grade5";
        ColorProfile[ColorProfile["Isonewspaper26v4"] = "Isonewspaper26v4"] = "Isonewspaper26v4";
        ColorProfile[ColorProfile["Isonewspaper26v4Grey"] = "Isonewspaper26v4Grey"] = "Isonewspaper26v4Grey";
    })(ColorProfile = exports.ColorProfile || (exports.ColorProfile = {}));
    var ColorTransformationIntent;
    (function (ColorTransformationIntent) {
        ColorTransformationIntent[ColorTransformationIntent["RelativeColorimetricBpc"] = "RelativeColorimetricBpc"] = "RelativeColorimetricBpc";
        ColorTransformationIntent[ColorTransformationIntent["AbsoluteColorimetric"] = "AbsoluteColorimetric"] = "AbsoluteColorimetric";
        ColorTransformationIntent[ColorTransformationIntent["Perceptual"] = "Perceptual"] = "Perceptual";
        ColorTransformationIntent[ColorTransformationIntent["RelativeColorimetric"] = "RelativeColorimetric"] = "RelativeColorimetric";
        ColorTransformationIntent[ColorTransformationIntent["Saturation"] = "Saturation"] = "Saturation";
    })(ColorTransformationIntent = exports.ColorTransformationIntent || (exports.ColorTransformationIntent = {}));
    var ResizeMode;
    (function (ResizeMode) {
        ResizeMode[ResizeMode["Fit"] = "Fit"] = "Fit";
        ResizeMode[ResizeMode["Shrink"] = "Shrink"] = "Shrink";
        ResizeMode[ResizeMode["Resize"] = "Resize"] = "Resize";
    })(ResizeMode = exports.ResizeMode || (exports.ResizeMode = {}));
    var AlphaHandling;
    (function (AlphaHandling) {
        AlphaHandling[AlphaHandling["DiscardAlpha"] = "DiscardAlpha"] = "DiscardAlpha";
        AlphaHandling[AlphaHandling["ReplaceAlpha"] = "ReplaceAlpha"] = "ReplaceAlpha";
        AlphaHandling[AlphaHandling["ReplaceInvertedAlpha"] = "ReplaceInvertedAlpha"] = "ReplaceInvertedAlpha";
    })(AlphaHandling = exports.AlphaHandling || (exports.AlphaHandling = {}));
    var CompressionType;
    (function (CompressionType) {
        CompressionType[CompressionType["None"] = "None"] = "None";
        CompressionType[CompressionType["Lzw"] = "Lzw"] = "Lzw";
        CompressionType[CompressionType["Rle"] = "Rle"] = "Rle";
        CompressionType[CompressionType["Zip"] = "Zip"] = "Zip";
    })(CompressionType = exports.CompressionType || (exports.CompressionType = {}));
    var Preset;
    (function (Preset) {
        Preset[Preset["Ultrafast"] = "ultrafast"] = "Ultrafast";
        Preset[Preset["Superfast"] = "superfast"] = "Superfast";
        Preset[Preset["Veryfast"] = "veryfast"] = "Veryfast";
        Preset[Preset["Faster"] = "faster"] = "Faster";
        Preset[Preset["Fast"] = "fast"] = "Fast";
        Preset[Preset["Medium"] = "medium"] = "Medium";
        Preset[Preset["Slow"] = "slow"] = "Slow";
        Preset[Preset["Slower"] = "slower"] = "Slower";
    })(Preset = exports.Preset || (exports.Preset = {}));
    var Profile;
    (function (Profile) {
        Profile[Profile["Aac_low"] = "aac_low"] = "Aac_low";
        Profile[Profile["Mpeg2_aac_low"] = "mpeg2_aac_low"] = "Mpeg2_aac_low";
        Profile[Profile["Aac_ltp"] = "aac_ltp"] = "Aac_ltp";
        Profile[Profile["Aac_main"] = "aac_main"] = "Aac_main";
    })(Profile = exports.Profile || (exports.Profile = {}));
    var Coder;
    (function (Coder) {
        Coder[Coder["Twoloop"] = "twoloop"] = "Twoloop";
        Coder[Coder["Anmr"] = "anmr"] = "Anmr";
        Coder[Coder["Fast"] = "fast"] = "Fast";
    })(Coder = exports.Coder || (exports.Coder = {}));
    /** System user roles. */
    var SystemUserRole;
    (function (SystemUserRole) {
        SystemUserRole[SystemUserRole["Administrator"] = "Administrator"] = "Administrator";
    })(SystemUserRole = exports.SystemUserRole || (exports.SystemUserRole = {}));
    /** The template engine used for parsing the display patterns */
    var TemplateEngine;
    (function (TemplateEngine) {
        TemplateEngine[TemplateEngine["DotLiquid"] = "DotLiquid"] = "DotLiquid";
    })(TemplateEngine = exports.TemplateEngine || (exports.TemplateEngine = {}));
    /** How the index field search works */
    var IndexFieldsSearchMode;
    (function (IndexFieldsSearchMode) {
        IndexFieldsSearchMode[IndexFieldsSearchMode["AllDescendantsFieldsOnRootSchema"] = "AllDescendantsFieldsOnRootSchema"] = "AllDescendantsFieldsOnRootSchema";
        IndexFieldsSearchMode[IndexFieldsSearchMode["SchemaAndParentFieldsOnly"] = "SchemaAndParentFieldsOnly"] = "SchemaAndParentFieldsOnly";
    })(IndexFieldsSearchMode = exports.IndexFieldsSearchMode || (exports.IndexFieldsSearchMode = {}));
    var OutputAccess;
    (function (OutputAccess) {
        OutputAccess[OutputAccess["Full"] = "Full"] = "Full";
        OutputAccess[OutputAccess["Preview"] = "Preview"] = "Preview";
        OutputAccess[OutputAccess["None"] = "None"] = "None";
    })(OutputAccess = exports.OutputAccess || (exports.OutputAccess = {}));
    var OutputSource;
    (function (OutputSource) {
        OutputSource[OutputSource["Rendered"] = "Rendered"] = "Rendered";
        OutputSource[OutputSource["Embedded"] = "Embedded"] = "Embedded";
    })(OutputSource = exports.OutputSource || (exports.OutputSource = {}));
    var FileTransferState;
    (function (FileTransferState) {
        FileTransferState[FileTransferState["Draft"] = "Draft"] = "Draft";
        FileTransferState[FileTransferState["UploadInProgress"] = "UploadInProgress"] = "UploadInProgress";
        FileTransferState[FileTransferState["UploadCompleted"] = "UploadCompleted"] = "UploadCompleted";
        FileTransferState[FileTransferState["DataExtractionInProgress"] = "DataExtractionInProgress"] = "DataExtractionInProgress";
        FileTransferState[FileTransferState["DataExtractionDone"] = "DataExtractionDone"] = "DataExtractionDone";
        FileTransferState[FileTransferState["ImportInProgress"] = "ImportInProgress"] = "ImportInProgress";
        FileTransferState[FileTransferState["ImportCompleted"] = "ImportCompleted"] = "ImportCompleted";
        FileTransferState[FileTransferState["UploadCancelled"] = "UploadCancelled"] = "UploadCancelled";
        FileTransferState[FileTransferState["ImportCancelled"] = "ImportCancelled"] = "ImportCancelled";
        FileTransferState[FileTransferState["UploadFailed"] = "UploadFailed"] = "UploadFailed";
        FileTransferState[FileTransferState["ImportFailed"] = "ImportFailed"] = "ImportFailed";
        FileTransferState[FileTransferState["DeleteInProgress"] = "DeleteInProgress"] = "DeleteInProgress";
        FileTransferState[FileTransferState["Deleted"] = "Deleted"] = "Deleted";
        FileTransferState[FileTransferState["CleanupInProgress"] = "CleanupInProgress"] = "CleanupInProgress";
        FileTransferState[FileTransferState["CleanupCompleted"] = "CleanupCompleted"] = "CleanupCompleted";
    })(FileTransferState = exports.FileTransferState || (exports.FileTransferState = {}));
    var SwaggerException = /** @class */ (function (_super) {
        __extends(SwaggerException, _super);
        function SwaggerException(message, status, response, headers, result) {
            var _this = _super.call(this) || this;
            _this.isSwaggerException = true;
            _this.message = message;
            _this.status = status;
            _this.response = response;
            _this.headers = headers;
            _this.result = result;
            return _this;
        }
        SwaggerException.isSwaggerException = function (obj) {
            return obj.isSwaggerException === true;
        };
        return SwaggerException;
    }(Error));
    exports.SwaggerException = SwaggerException;
    function throwException(message, status, response, headers, result) {
        if (result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, headers, null);
    }
    var OidcClientSettings = /** @class */ (function () {
        function OidcClientSettings() {
        }
        OidcClientSettings.create = function (settings) {
            return {
                client_id: settings.clientId,
                scope: settings.scope,
                authority: settings.stsServerUrl,
                response_type: "id_token token",
                filterProtocolClaims: true,
                loadUserInfo: true,
                redirect_uri: settings.redirectServerUrl ? settings.redirectServerUrl : settings.serverUrl + '/auth-callback',
                post_logout_redirect_uri: settings.logoutServerUrl ? settings.logoutServerUrl : settings.serverUrl,
                acr_values: 'tenant:{"id":"' +
                    settings.customerId + '","alias":"' +
                    settings.customerAlias + '"}'
            };
        };
        return OidcClientSettings;
    }());
    exports.OidcClientSettings = OidcClientSettings;
    var AccessTokenAuthClient = /** @class */ (function (_super) {
        __extends(AccessTokenAuthClient, _super);
        function AccessTokenAuthClient(pictureparkApiUrl, customerAlias, accessToken) {
            var _this = _super.call(this, pictureparkApiUrl, customerAlias) || this;
            _this.accessToken = accessToken;
            return _this;
        }
        AccessTokenAuthClient.prototype.transformHttpRequestOptions = function (options) {
            if (options.headers && this.accessToken) {
                options.headers.set('Authorization', 'Bearer ' + this.accessToken);
            }
            return _super.prototype.transformHttpRequestOptions.call(this, options);
        };
        return AccessTokenAuthClient;
    }(AuthClient));
    exports.AccessTokenAuthClient = AccessTokenAuthClient;
});

